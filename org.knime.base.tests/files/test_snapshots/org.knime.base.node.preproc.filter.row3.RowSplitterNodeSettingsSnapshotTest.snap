{
  "data" : {
    "model" : {
      "matchCriteria" : "AND",
      "predicates" : [ ],
      "domains" : "RETAIN",
      "outputMode" : "MATCHING"
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "domains" : {
            "oneOf" : [ {
              "const" : "RETAIN",
              "title" : "Retain"
            }, {
              "const" : "COMPUTE",
              "title" : "Compute"
            } ],
            "title" : "Column domains",
            "description" : "<p>Specify whether to take domains of all input columns as output domains as-is or compute them on the output\nrows.</p>\n\n<p>\nDepending on the use case, one or the other setting may be preferable:\n<ul>\n    <li><em>Retaining</em> input columns can be useful, if the axis limits of a view should be derived from\n    domain bounds, and that bounds should stay stable even when the displayed data is filtered.\n    </li>\n    <li><em>Computing</em> domains can be useful when a selection widget consumes the output and should only\n    display actually present options to users.</li>\n</ul>\n</p>\n\n<p>\nIf column domains are irrelevant for a particular use case, the &quot;Retain&quot; option should be used\nsince it does not incur computation costs.\n</p>\n\n<p>\nFor more control over individual column domains, you can use the <a href=\"\nhttps://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.domain.dialog2.DomainNodeFactory        \"><em>Domain Calculator</em></a>, <a href=\"\nhttps://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.domain.editnumeric.EditNumericDomainNodeFactory        \"><em>Edit Numeric Domain</em></a>, or <a href=\"\nhttps://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.preproc.domain.editnominal.EditNominalDomainNodeFactory        \"><em>Edit Nominal Domain</em></a> nodes.</p>\n\n<ul>\n<li><b>Retain</b>: Retain input domains on output columns, i.e. the upper and lower bounds or possible values in the table spec\nare not changed, even if one of the bounds or one value is fully filtered out from the output table.\nIf the input does not contain domain information, so will the output.\n</li>\n<li><b>Compute</b>: Compute column domains on output columns, i.e. upper and lower bounds and possible values are computed only\non the rows output by the node.\n</li>\n</ul>",
            "default" : "RETAIN"
          },
          "matchCriteria" : {
            "oneOf" : [ {
              "const" : "AND",
              "title" : "All criteria"
            }, {
              "const" : "OR",
              "title" : "Any criterion"
            } ],
            "title" : "Match row if matched by",
            "description" : "Match the row if all or any criteria match:\n<ul>\n    <li><b>All criteria</b>: a row is matched if <i>all</i> of the criteria match\n    (intersection of matches)</li>\n    <li><b>Any criterion</b>: a row is matched if <i>at least one</i> of the\n    criteria matches (union of matches)</li>\n</ul>\n",
            "default" : "AND"
          },
          "outputMode" : {
            "oneOf" : [ {
              "const" : "MATCHING",
              "title" : "Matching rows at first output, non-matching at second output"
            }, {
              "const" : "NON_MATCHING",
              "title" : "Non-matching rows at first output, matching at second output"
            } ],
            "title" : "Splitting behavior",
            "description" : "Determines whether matching rows are output at the first port and non-matching rows are output at the second port, or vice-versa.",
            "default" : "MATCHING"
          },
          "predicates" : {
            "title" : "Filter criteria",
            "description" : "The list of criteria that should be filtered on.",
            "default" : [ ],
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "type" : "object",
                  "properties" : {
                    "compatibleTypes" : {
                      "configKeys" : [ "compatibleTypes_Internals" ],
                      "type" : "array",
                      "items" : {
                        "type" : "string",
                        "configKeys" : [ "compatibleTypes_Internals" ]
                      }
                    },
                    "selected" : {
                      "type" : "string"
                    }
                  },
                  "title" : "Filter column",
                  "description" : "The column on which to apply the filter.",
                  "default" : {
                    "selected" : "BoolCol",
                    "compatibleTypes" : [ "org.knime.core.data.BooleanValue", "org.knime.core.data.DataValue", "org.knime.core.data.IntValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue", "org.knime.core.data.NominalValue" ]
                  }
                },
                "operator" : {
                  "oneOf" : [ {
                    "const" : "EQ",
                    "title" : "Equals"
                  }, {
                    "const" : "NEQ",
                    "title" : "Does not equal"
                  }, {
                    "const" : "LT",
                    "title" : "Less than"
                  }, {
                    "const" : "LTE",
                    "title" : "Less than or equal"
                  }, {
                    "const" : "GT",
                    "title" : "Greater than"
                  }, {
                    "const" : "GTE",
                    "title" : "Greater than or equal"
                  }, {
                    "const" : "FIRST_N_ROWS",
                    "title" : "First <i>n</i> rows"
                  }, {
                    "const" : "LAST_N_ROWS",
                    "title" : "Last <i>n</i> rows"
                  }, {
                    "const" : "REGEX",
                    "title" : "Matches regex"
                  }, {
                    "const" : "WILDCARD",
                    "title" : "Matches wildcard"
                  }, {
                    "const" : "IS_TRUE",
                    "title" : "Is true"
                  }, {
                    "const" : "IS_FALSE",
                    "title" : "Is false"
                  }, {
                    "const" : "IS_MISSING",
                    "title" : "Is missing"
                  }, {
                    "const" : "IS_NOT_MISSING",
                    "title" : "Is not missing"
                  } ],
                  "title" : "Operator",
                  "description" : "The operator defining the filter criterion.\n<ul>\n<li><b>Equals</b>: Value in column must be <b>equal</b> to specified value</li>\n<li><b>Does not equal</b>: Value in column must be <b>not equal</b> to specified value</li>\n<li><b>Less than</b>: Value in column must be <b>strictly smaller</b> than specified value</li>\n<li><b>Less than or equal</b>: Value in column must be <b>smaller than or equal</b> to specified value</li>\n<li><b>Greater than</b>: Value in column must be <b>strictly larger</b> than specified value</li>\n<li><b>Greater than or equal</b>: Value in column must be <b>larger than or equal</b> than specified value</li>\n<li><b>First <i>n</i> rows</b>: Matches the specified number of rows at the start of the input</li>\n<li><b>Last <i>n</i> rows</b>: Matches the specified number of rows at the end of the input</li>\n<li><b>Matches regex</b>: Value in column must match the specified regular expression</li>\n<li><b>Matches wildcard</b>: Value in column must match the specified pattern, which may contain wildcards <tt>*</tt> and <tt>?</tt></li>\n<li><b>Is true</b>: Boolean value in column must be <tt>true</tt></li>\n<li><b>Is false</b>: Boolean value in column must be <tt>false</tt></li>\n<li><b>Is missing</b>: Value in column must be <i>missing</i></li>\n<li><b>Is not missing</b>: Value in column must <em>not</em> be <i>missing</i></li>\n</ul>",
                  "default" : "EQ"
                },
                "predicateValues" : {
                  "type" : "object",
                  "properties" : {
                    "inputKind" : {
                      "oneOf" : [ {
                        "const" : "SINGLE",
                        "title" : "Single"
                      }, {
                        "const" : "DOUBLE",
                        "title" : "Double"
                      }, {
                        "const" : "COLLECTION",
                        "title" : "Collection"
                      } ]
                    },
                    "values" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      }
                    }
                  },
                  "title" : "Filter value",
                  "description" : "The value for the filter criterion.\n<br/>\n\n<i>Note:</i> Currently, comparison values for non-numeric and non-string data types, e.g.\ndate&amp;time-based types, must be entered as its string representation like in the <a href=\"\nhttps://hub.knime.com/knime/extensions/org.knime.features.base/latest/org.knime.base.node.io.tablecreator.TableCreator2NodeFactory\"><i>Table Creator</i></a> node.\n<br/>\n\nThe format for date&amp;time-based values is \"ISO-8601 extended\". For example, a \"Local Date\" must be\nentered in the format \"2006-07-28\". More information can be obtained from the ISO patterns in the\n\"Predefined Formatters\" table of the <a href=\"\nhttps://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/time/format/DateTimeFormatter.html#predefined\">Java SE 17 documentation</a>.\n",
                  "default" : {
                    "values" : [ {
                      "value" : false,
                      "cellClassName" : "org.knime.core.data.def.BooleanCell",
                      "valueDataType" : "{\"name\":\"dataTypeConfig\",\"value\":{\"dataType\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.BooleanCell\"},\"is_null\":{\"type\":\"boolean\",\"value\":false}}}}}",
                      "useStringCaseMatchingSettings" : false
                    } ],
                    "inputKind" : "SINGLE"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "Filter",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/matchCriteria",
        "options" : {
          "format" : "valueSwitch"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/predicates",
            "schema" : {
              "minItems" : 2
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/predicates",
        "options" : {
          "detail" : [ {
            "type" : "HorizontalLayout",
            "elements" : [ {
              "type" : "Control",
              "scope" : "#/properties/column",
              "options" : {
                "format" : "columnSelection",
                "choicesProvider" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$ColumnsWithTypeMapping",
                "showNoneColumn" : false,
                "showRowKeys" : true,
                "showRowNumbers" : true,
                "showSearch" : true,
                "showMode" : true
              }
            }, {
              "type" : "Control",
              "scope" : "#/properties/operator",
              "options" : {
                "choicesProvider" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$TypeBasedOperatorChoices",
                "format" : "dropDown",
                "showNoneColumn" : false,
                "showRowKeys" : false,
                "showSearch" : true,
                "showMode" : true
              }
            } ]
          }, {
            "type" : "Control",
            "scope" : "#/properties/predicateValues",
            "options" : {
              "format" : "dynamicValue"
            }
          } ],
          "addButtonText" : "Add criterion",
          "arrayElementTitle" : "Criterion",
          "showSortButtons" : true,
          "elementDefaultValueProvider" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$DefaultFitlerCriterionProvider"
        }
      } ]
    }, {
      "label" : "Output",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/domains",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/outputMode",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      } ]
    } ],
    "initialUpdates" : [ {
      "scopes" : null,
      "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$DefaultFitlerCriterionProvider",
      "value" : {
        "column" : {
          "selected" : "BoolCol",
          "compatibleTypes" : [ "org.knime.core.data.BooleanValue", "org.knime.core.data.DataValue", "org.knime.core.data.IntValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue", "org.knime.core.data.NominalValue" ]
        },
        "operator" : "IS_TRUE",
        "predicateValues" : {
          "values" : [ {
            "value" : false,
            "cellClassName" : "org.knime.core.data.def.BooleanCell",
            "valueDataType" : "{\"name\":\"dataTypeConfig\",\"value\":{\"dataType\":{\"type\":\"tree\",\"value\":{\"cell_class\":{\"type\":\"string\",\"value\":\"org.knime.core.data.def.BooleanCell\"},\"is_null\":{\"type\":\"boolean\",\"value\":false}}}}}",
            "useStringCaseMatchingSettings" : false
          } ],
          "inputKind" : "SINGLE"
        }
      }
    }, {
      "scopes" : null,
      "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$ColumnsWithTypeMapping",
      "value" : [ {
        "id" : "DoubleCol",
        "text" : "DoubleCol",
        "type" : {
          "id" : "org.knime.core.data.DoubleValue",
          "text" : "Number (double)"
        },
        "compatibleTypes" : [ "org.knime.core.data.DoubleValue", "org.knime.core.data.DataValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue" ]
      }, {
        "id" : "StringCol",
        "text" : "StringCol",
        "type" : {
          "id" : "org.knime.core.data.StringValue",
          "text" : "String"
        },
        "compatibleTypes" : [ "org.knime.core.data.StringValue", "org.knime.core.data.DataValue", "org.knime.core.data.NominalValue" ]
      }, {
        "id" : "IntCol",
        "text" : "IntCol",
        "type" : {
          "id" : "org.knime.core.data.IntValue",
          "text" : "Number (integer)"
        },
        "compatibleTypes" : [ "org.knime.core.data.IntValue", "org.knime.core.data.DataValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue" ]
      }, {
        "id" : "BoolCol",
        "text" : "BoolCol",
        "type" : {
          "id" : "org.knime.core.data.BooleanValue",
          "text" : "Boolean value"
        },
        "compatibleTypes" : [ "org.knime.core.data.BooleanValue", "org.knime.core.data.DataValue", "org.knime.core.data.IntValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue", "org.knime.core.data.NominalValue" ]
      } ]
    } ],
    "globalUpdates" : [ {
      "trigger" : {
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$OperatorRef",
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/operator" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/predicateValues" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$DynamicValuesInputRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/operator" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$OperatorRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/column" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$SelectedColumnRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$SelectedColumnRef",
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/column" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/predicateValues" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$DynamicValuesInputRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/operator" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$OperatorRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/column" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$SelectedColumnRef"
      } ]
    } ]
  }
}