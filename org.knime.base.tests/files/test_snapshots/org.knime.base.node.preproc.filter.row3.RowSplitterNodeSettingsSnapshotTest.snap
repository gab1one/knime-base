{
  "data" : {
    "model" : {
      "matchCriteria" : "AND",
      "predicates" : [ {
        "column" : {
          "selected" : "BoolCol",
          "compatibleTypes" : [ "org.knime.core.data.BooleanValue", "org.knime.core.data.DataValue", "org.knime.core.data.IntValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue", "org.knime.core.data.NominalValue" ]
        },
        "operator" : "EQ",
        "predicateValues" : {
          "values" : [ {
            "value" : null,
            "cellClassName" : "org.knime.core.data.def.BooleanCell"
          } ],
          "inputKind" : "Single"
        }
      } ],
      "outputMode" : "FIRST"
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "matchCriteria" : {
            "oneOf" : [ {
              "const" : "AND",
              "title" : "All criteria"
            }, {
              "const" : "OR",
              "title" : "Any criterion"
            } ],
            "title" : "Match row if matched by",
            "description" : "Match the row if all or any criteria match:\n<ul>\n    <li><b>All criteria</b>: a row is matched if <i>all</i> of the criteria match\n    (intersection of matches)</li>\n    <li><b>Any criterion</b>: a row is matched if <i>at least one</i> of the\n    criteria matches (union of matches)</li>\n</ul>\n"
          },
          "outputMode" : {
            "oneOf" : [ {
              "const" : "FIRST",
              "title" : "Matching rows at first output, non-matching at second output"
            }, {
              "const" : "SECOND",
              "title" : "Non-matching rows at first output, matching at second output"
            } ],
            "title" : "Splitting behavior",
            "description" : "Determines whether matching rows are output at the first port and non-matching rows are output at the second port, or vice-versa.",
            "default" : "FIRST"
          },
          "predicates" : {
            "title" : "Filter criteria",
            "description" : "The list of criteria that should be filtered on.",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "column" : {
                  "type" : "object",
                  "properties" : {
                    "compatibleTypes" : {
                      "configKeys" : [ "compatibleTypes_Internals" ],
                      "type" : "array",
                      "items" : {
                        "type" : "string",
                        "configKeys" : [ "compatibleTypes_Internals" ]
                      }
                    },
                    "selected" : {
                      "type" : "string"
                    }
                  },
                  "title" : "Filter column",
                  "description" : "The column on which to apply the filter.",
                  "default" : {
                    "selected" : "BoolCol",
                    "compatibleTypes" : [ "org.knime.core.data.BooleanValue", "org.knime.core.data.DataValue", "org.knime.core.data.IntValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue", "org.knime.core.data.NominalValue" ]
                  }
                },
                "operator" : {
                  "oneOf" : [ {
                    "const" : "EQ",
                    "title" : "="
                  }, {
                    "const" : "NEQ",
                    "title" : "≠"
                  }, {
                    "const" : "LT",
                    "title" : "&lt;"
                  }, {
                    "const" : "LTE",
                    "title" : "≤"
                  }, {
                    "const" : "GT",
                    "title" : "&gt;"
                  }, {
                    "const" : "GTE",
                    "title" : "≥"
                  }, {
                    "const" : "FIRST_N_ROWS",
                    "title" : "First <i>n</i> rows"
                  }, {
                    "const" : "LAST_N_ROWS",
                    "title" : "Last <i>n</i> rows"
                  }, {
                    "const" : "REGEX",
                    "title" : "Matches regex"
                  }, {
                    "const" : "WILDCARD",
                    "title" : "Matches wildcard"
                  }, {
                    "const" : "IS_TRUE",
                    "title" : "Is true"
                  }, {
                    "const" : "IS_FALSE",
                    "title" : "Is false"
                  }, {
                    "const" : "IS_MISSING",
                    "title" : "Is missing"
                  } ],
                  "title" : "Operator",
                  "description" : "The operator defining the filter criterion.\n<ul>\n<li><b>=</b>: Value in column must be <b>equal</b> to specified value</li>\n<li><b>≠</b>: Value in column must be <b>not equal</b> to specified value</li>\n<li><b>&lt;</b>: Value in column must be <b>strictly smaller</b> than specified value</li>\n<li><b>≤</b>: Value in column must be <b>smaller than or equal</b> to specified value</li>\n<li><b>&gt;</b>: Value in column must be <b>strictly larger</b> than specified value</li>\n<li><b>≥</b>: Value in column must be <b>larger than or equal</b> than specified value</li>\n<li><b>First <i>n</i> rows</b>: Matches the specified number of rows at the start of the input</li>\n<li><b>Last <i>n</i> rows</b>: Matches the specified number of rows at the end of the input</li>\n<li><b>Matches regex</b>: Value in column must match the specified regular expression</li>\n<li><b>Matches wildcard</b>: Value in column must match the specified pattern, which may contain wildcards <tt>*</tt> and <tt>?</tt></li>\n<li><b>Is true</b>: Boolean value in column must be <tt>true</tt></li>\n<li><b>Is false</b>: Boolean value in column must be <tt>false</tt></li>\n<li><b>Is missing</b>: Value in column must be <i>missing</i></li>\n</ul>",
                  "default" : "EQ"
                },
                "predicateValues" : {
                  "type" : "object",
                  "properties" : {
                    "inputKind" : {
                      "oneOf" : [ {
                        "const" : "Single",
                        "title" : "Single"
                      }, {
                        "const" : "Double",
                        "title" : "Double"
                      }, {
                        "const" : "Collection",
                        "title" : "Collection"
                      } ]
                    },
                    "values" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "modifiers" : {
                            "type" : "object",
                            "default" : null
                          },
                          "type" : {
                            "type" : "object"
                          },
                          "value" : {
                            "type" : "object",
                            "default" : null
                          }
                        }
                      }
                    }
                  },
                  "title" : "Filter value",
                  "description" : "The value for the filter criterion.",
                  "default" : {
                    "values" : [ {
                      "value" : null,
                      "cellClassName" : "org.knime.core.data.def.BooleanCell"
                    } ],
                    "inputKind" : "Single"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "Filter",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/matchCriteria",
        "options" : {
          "format" : "valueSwitch"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/predicates",
            "schema" : {
              "minItems" : 2
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/predicates",
        "options" : {
          "detail" : [ {
            "type" : "HorizontalLayout",
            "elements" : [ {
              "type" : "Control",
              "scope" : "#/properties/column",
              "options" : {
                "format" : "columnSelection",
                "choicesProvider" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$ColumnsWithTypeMapping",
                "showNoneColumn" : false,
                "showRowKeys" : true,
                "showRowNumbers" : true,
                "showSearch" : true,
                "showMode" : true
              }
            }, {
              "type" : "Control",
              "scope" : "#/properties/operator",
              "options" : {
                "choicesProvider" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$TypeBasedOperatorChoices",
                "format" : "dropDown",
                "showNoneColumn" : false,
                "showRowKeys" : false,
                "showSearch" : true,
                "showMode" : true
              }
            } ]
          }, {
            "type" : "Control",
            "scope" : "#/properties/predicateValues",
            "options" : {
              "format" : "dynamicValue"
            }
          } ],
          "addButtonText" : "Add criterion",
          "arrayElementTitle" : "Criterion",
          "showSortButtons" : true
        }
      } ]
    }, {
      "label" : "Splitting behavior",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/outputMode",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical"
        },
        "label" : ""
      } ]
    } ],
    "initialUpdates" : [ {
      "scopes" : null,
      "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$ColumnsWithTypeMapping",
      "value" : [ {
        "id" : "DoubleCol",
        "text" : "DoubleCol",
        "type" : {
          "id" : "org.knime.core.data.DoubleValue",
          "text" : "Number (double)"
        },
        "compatibleTypes" : [ "org.knime.core.data.DoubleValue", "org.knime.core.data.DataValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue" ]
      }, {
        "id" : "StringCol",
        "text" : "StringCol",
        "type" : {
          "id" : "org.knime.core.data.StringValue",
          "text" : "String"
        },
        "compatibleTypes" : [ "org.knime.core.data.StringValue", "org.knime.core.data.DataValue", "org.knime.core.data.NominalValue" ]
      }, {
        "id" : "IntCol",
        "text" : "IntCol",
        "type" : {
          "id" : "org.knime.core.data.IntValue",
          "text" : "Number (integer)"
        },
        "compatibleTypes" : [ "org.knime.core.data.IntValue", "org.knime.core.data.DataValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue" ]
      }, {
        "id" : "BoolCol",
        "text" : "BoolCol",
        "type" : {
          "id" : "org.knime.core.data.BooleanValue",
          "text" : "Boolean value"
        },
        "compatibleTypes" : [ "org.knime.core.data.BooleanValue", "org.knime.core.data.DataValue", "org.knime.core.data.IntValue", "org.knime.core.data.LongValue", "org.knime.core.data.DoubleValue", "org.knime.core.data.ComplexNumberValue", "org.knime.core.data.FuzzyNumberValue", "org.knime.core.data.FuzzyIntervalValue", "org.knime.core.data.BoundedValue", "org.knime.core.data.NominalValue" ]
      } ]
    } ],
    "globalUpdates" : [ {
      "trigger" : {
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$OperatorRef",
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/operator" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/predicateValues" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$DynamicValuesInputRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/operator" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$OperatorRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/column" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$SelectedColumnRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$SelectedColumnRef",
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/column" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/predicateValues" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$DynamicValuesInputRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/operator" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$OperatorRef"
      }, {
        "scopes" : [ "#/properties/model/properties/predicates", "#/properties/column" ],
        "id" : "org.knime.base.node.preproc.filter.row3.AbstractRowFilterNodeSettings$FilterCriterion$SelectedColumnRef"
      } ]
    } ]
  }
}