{
  "data" : {
    "model" : {
      "colName" : "test2",
      "patternType" : "LITERAL",
      "enableEscaping" : false,
      "caseMatching" : "CASESENSITIVE",
      "pattern" : "",
      "replacement" : "",
      "replacementStrategy" : "WHOLE_STRING",
      "createNewCol" : false,
      "newColName" : "ReplacedColumn",
      "doNotAllowPaddedColumnName" : true,
      "useNewFixedWildcardBehavior" : true
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "caseMatching" : {
            "oneOf" : [ {
              "const" : "CASESENSITIVE",
              "title" : "Case sensitive"
            }, {
              "const" : "CASEINSENSITIVE",
              "title" : "Case insensitive"
            } ],
            "title" : "Case sensitive",
            "description" : "Specifies whether matching will distinguish between upper and lower case letters.",
            "default" : "CASESENSITIVE"
          },
          "colName" : {
            "type" : "string",
            "title" : "Target column",
            "description" : "Select the column in which the strings should be replaced.",
            "default" : "test2"
          },
          "createNewCol" : {
            "type" : "boolean",
            "title" : "Append new column",
            "description" : "If enabled, the strings will not be replaced in-place but a new column is appended that contains the\noriginal string with the replacement applied.\n",
            "default" : false
          },
          "doNotAllowPaddedColumnName" : {
            "type" : "boolean",
            "default" : true
          },
          "enableEscaping" : {
            "type" : "boolean",
            "title" : "Use backslash as escape character",
            "description" : "If checked, the backslash character can be used to escape special characters. For instance, <tt>\\?</tt>\nwill match the literal character <tt>?</tt> instead of an arbitrary character. In order to match a\nbackslash you need to escape the backslash, too (<tt>\\</tt>).\n",
            "default" : false
          },
          "newColName" : {
            "type" : "string",
            "title" : "New column name",
            "description" : "The name of the created column with replaced strings",
            "default" : "ReplacedColumn"
          },
          "pattern" : {
            "type" : "string",
            "title" : "Pattern",
            "description" : "A literal string, wildcard pattern or regular expression, depending on the pattern type selected above.\n",
            "default" : ""
          },
          "patternType" : {
            "oneOf" : [ {
              "const" : "LITERAL",
              "title" : "Literal"
            }, {
              "const" : "WILDCARD",
              "title" : "Wildcard"
            }, {
              "const" : "REGEX",
              "title" : "Regular expression"
            } ],
            "title" : "Pattern type",
            "description" : "Select the type of pattern which you want to use.\n<ul>\n    <li><i>Literal</i> matches the pattern as is.</li>\n    <li>\n        <i>Wildcard</i> matches <tt>*</tt> to zero or more arbitrary characters and matches\n        <tt>?</tt> to any single character.\n    </li>\n    <li>\n        <i>Regular expression</i>\n        matches using the full functionality of Java regular expressions, including back references\n        in the replacement text. See the\n        <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\">Java API\n        </a> for details.\n    </li>\n</ul>\n",
            "default" : "LITERAL"
          },
          "replacement" : {
            "type" : "string",
            "title" : "Replacement text",
            "description" : "The text that replaces the previous value in the cell if the pattern matched it. If you are using a\nregular expression, you may also use backreferences (e.g. <tt>$1</tt> to refer to the first capture group,\nnamed capture groups can also be used with <tt>(?&lt;group&gt;)</tt> and <tt>${group}</tt> to refer to\nthem).\n",
            "default" : ""
          },
          "replacementStrategy" : {
            "oneOf" : [ {
              "const" : "WHOLE_STRING",
              "title" : "Whole string"
            }, {
              "const" : "ALL_OCCURRENCES",
              "title" : "All occurrences"
            } ],
            "title" : "Replacement strategy",
            "description" : "Select what to replace in case a string matches a pattern.\n<ul>\n    <li>\n        <i>Whole string</i> replaces the entire string with the replacement string, requiring an\n        exact  match of the whole string.\n    </li>\n    <li>\n        <i>All occurrences</i> replaces all occurrences of the pattern with the replacement string.\n        Note that when e.g. matching on the RegEx-pattern <tt>.*</tt>, an empty string at the end\n        of the input is also matched and replaced. To avoid that, use e.g. the pattern <tt>^.*</tt>\n        to indicate that the match has to start at the beginning of the string.\n    </li>\n</ul>\n",
            "default" : "WHOLE_STRING"
          },
          "useNewFixedWildcardBehavior" : {
            "type" : "boolean",
            "default" : true
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "Column Selection",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/colName",
        "options" : {
          "format" : "dropDown"
        },
        "providedOptions" : [ "possibleValues" ]
      } ]
    }, {
      "label" : "Find & Replace",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/patternType",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/enableEscaping",
        "options" : {
          "format" : "checkbox"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/patternType",
            "schema" : {
              "oneOf" : [ {
                "const" : "WILDCARD"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/caseMatching",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/pattern"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/replacement"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/replacementStrategy",
        "options" : {
          "format" : "valueSwitch"
        }
      } ]
    }, {
      "label" : "Output",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/createNewCol",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/newColName",
        "options" : {
          "validation" : {
            "pattern" : {
              "parameters" : {
                "pattern" : "\\S(.*\\S)?"
              },
              "errorMessage" : "The string must start and end with a non-whitespace character."
            }
          }
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/createNewCol",
            "schema" : {
              "const" : true
            }
          }
        }
      } ]
    } ]
  },
  "persist" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "colName" : {
            "configKey" : "colName"
          },
          "patternType" : {
            "deprecatedConfigKeys" : [ {
              "deprecated" : [ [ "findPattern" ], [ "patternIsRegex" ] ]
            } ]
          },
          "enableEscaping" : {
            "configKey" : "enableEscaping"
          },
          "caseMatching" : {
            "configPaths" : [ [ "caseSensitive" ] ]
          },
          "pattern" : {
            "configKey" : "pattern"
          },
          "replacement" : {
            "configKey" : "replacement"
          },
          "replacementStrategy" : {
            "configPaths" : [ [ "replaceAllOccurences" ] ]
          },
          "createNewCol" : {
            "configKey" : "createNewCol"
          },
          "newColName" : {
            "configKey" : "newColName"
          },
          "doNotAllowPaddedColumnName" : {
            "configPaths" : [ ]
          },
          "useNewFixedWildcardBehavior" : {
            "deprecatedConfigKeys" : [ {
              "deprecated" : [ ]
            } ]
          }
        }
      }
    }
  },
  "initialUpdates" : [ {
    "scope" : "#/properties/model/properties/colName",
    "providedOptionName" : "possibleValues",
    "values" : [ {
      "indices" : [ ],
      "value" : [ {
        "id" : "test2",
        "text" : "test2",
        "type" : {
          "id" : "org.knime.core.data.StringValue",
          "text" : "String"
        }
      } ]
    } ]
  } ]
}