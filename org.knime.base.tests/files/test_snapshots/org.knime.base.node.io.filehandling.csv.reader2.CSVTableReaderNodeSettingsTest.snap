{
  "data" : {
    "model" : {
      "settings" : {
        "source" : {
          "path" : {
            "fsCategory" : "LOCAL",
            "path" : "",
            "timeout" : 10000,
            "context" : {
              "fsToString" : "(LOCAL, )"
            }
          }
        },
        "fileSelectionInternal" : {
          "settingsModelID" : "SMID_ReaderFileChooser",
          "enabledStatus" : true
        },
        "firstRowContainsColumnNames" : true,
        "firstColumnContainsRowIds" : false,
        "ifRowHasLessColumnsOption" : "FAIL",
        "skipEmptyDataRows" : false,
        "prependFileIndexToRowId" : false,
        "commentLineCharacter" : "#",
        "columnDelimiter" : ",",
        "quoteCharacter" : "\"",
        "quoteEscapeCharacter" : "\"",
        "rowDelimiterOption" : "LINE_BREAK",
        "customRowDelimiter" : "\n",
        "numberOfCharactersForAutodetection" : 1048576
      },
      "advancedSettings" : {
        "howToCombineColumns" : "FAIL",
        "appendPathColumn" : false,
        "filePathColumnName" : "File Path",
        "limitScannedRows" : true,
        "maxDataRowsScanned" : 10000,
        "limitMemoryPerColumn" : true,
        "maximumNumberOfColumns" : 8192,
        "quotedStringsOption" : "REMOVE_QUOTES_AND_TRIM",
        "replaceEmptyQuotedStringsByMissingValues" : true,
        "quotedStringsContainNoRowDelimiters" : false,
        "minChunkSizeInBytes" : 67108864,
        "maxNumChunksPerFile" : 8,
        "thousandsSeparator" : "",
        "decimalSeparator" : ".",
        "ifSchemaChangesOption" : "FAIL"
      },
      "limitRows" : {
        "skipFirstLines" : 0,
        "skipFirstDataRows" : 0,
        "limitNumberOfRows" : false,
        "maximumNumberOfRows" : 50
      },
      "encoding" : {
        "charset" : {
          "fileEncoding" : "DEFAULT",
          "customEncoding" : ""
        }
      },
      "tableSpecConfig" : {
        "persistorSettings" : {
          "configId" : {
            "firstRowContainsColumnNames" : true,
            "firstColumnContainsRowIds" : false,
            "commentLineCharacter" : "#",
            "columnDelimiter" : ",",
            "quoteCharacter" : "\"",
            "quoteEscapeCharacter" : "\"",
            "rowDelimiterOption" : "LINE_BREAK",
            "customRowDelimiter" : "\n",
            "quotedStringsOption" : "REMOVE_QUOTES_AND_TRIM",
            "replaceEmptyQuotedStringsByMissingValues" : true,
            "limitScannedRows" : true,
            "maxDataRowsScanned" : 10000,
            "thousandsSeparator" : "",
            "decimalSeparator" : ".",
            "fileEncoding" : "DEFAULT",
            "customEncoding" : "",
            "skipFirstLines" : 0,
            "skipFirstDataRows" : 0
          },
          "sourceId" : "",
          "fsLocations" : [ ],
          "specs" : [ ],
          "appendPathColumn" : false,
          "filePathColumnName" : "File Path",
          "takeColumnsFrom" : "UNION"
        },
        "enforceTypes" : true,
        "columnTransformation" : [ {
          "columnName" : null,
          "originalType" : "<default-columntype>",
          "originalTypeLabel" : "Default columntype",
          "includeInOutput" : true,
          "columnRename" : null,
          "type" : "<default-columntype>"
        } ]
      }
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "advancedSettings" : {
            "type" : "object",
            "properties" : {
              "appendPathColumn" : {
                "type" : "boolean",
                "title" : "Append file path column",
                "description" : "Select this box if you want to add a column containing the path of the file from which the row is read.\nThe node will fail if adding the column with the provided name causes a name collision with any of the\ncolumns in the read table.\n",
                "default" : false,
                "configKeys" : [ "append_path_column_Internals" ]
              },
              "decimalSeparator" : {
                "type" : "string",
                "title" : "Decimal separator",
                "description" : "Specifies the decimal separator character for parsing numbers. The decimal separator is only used for\nthe parsing of double values. Note that the decimal separator must differ from the thousands separator.\nYou must always provide a decimal separator.\n",
                "default" : ".",
                "minLength" : 1,
                "configKeys" : [ "decimal_separator" ]
              },
              "filePathColumnName" : {
                "type" : "string",
                "title" : "File path column name",
                "description" : "The name of the column containing the file path.",
                "default" : "File Path",
                "configKeys" : [ "path_column_name_Internals" ]
              },
              "howToCombineColumns" : {
                "oneOf" : [ {
                  "const" : "FAIL",
                  "title" : "Fail if different"
                }, {
                  "const" : "UNION",
                  "title" : "Union"
                }, {
                  "const" : "INTERSECTION",
                  "title" : "Intersection"
                } ],
                "title" : "How to combine columns",
                "description" : "Specifies how to deal with reading multiple files in which not all column names are identical.\n<ul>\n<li><b>Fail if different</b>: The node will fail if multiple files are read and not all files have the same column names.</li>\n<li><b>Union</b>: Any column that is part of any input file is considered. If a file is missing a column, it is filled\nup with missing values.\n</li>\n<li><b>Intersection</b>: Only columns that appear in all files are considered for the output table.</li>\n</ul>",
                "default" : "FAIL",
                "configKeys" : [ "fail_on_differing_specs", "spec_merge_mode" ]
              },
              "ifSchemaChangesOption" : {
                "oneOf" : [ {
                  "const" : "FAIL",
                  "title" : "Fail"
                }, {
                  "const" : "USE_NEW_SCHEMA",
                  "title" : "Use new schema"
                }, {
                  "const" : "IGNORE",
                  "title" : "Ignore (deprecated)"
                } ],
                "title" : "If schema changes",
                "description" : "Specifies the node behavior if the content of the configured file/folder changes between executions,\ni.e., columns are added/removed to/from the file(s) or their types change. The following options are\navailable:\n\n<ul>\n<li><b>Fail</b>: If set, the node fails if the column names in the file have changed. Changes in column types will not be\ndetected.\n</li>\n<li><b>Use new schema</b>: If set, the node will compute a new table specification for the current schema of the file at the time\nwhen the node is executed. Note that the node will not output a table specification before execution and\nthat it will not apply transformations, therefore the transformation tab is disabled.\n</li>\n<li><b>Ignore (deprecated)</b>: If set, the node tries to ignore the changes and outputs a table with the old table specification. This\noption is deprecated and should never be selected for new workflows, as it may lead to invalid data in\nthe resulting table. Use one of the other options instead.\n</li>\n</ul>",
                "default" : "FAIL",
                "configKeys" : [ "save_table_spec_config", "check_table_spec" ]
              },
              "limitMemoryPerColumn" : {
                "type" : "boolean",
                "title" : "Limit memory per column",
                "description" : "If selected the memory per column is restricted to 1MB in order to prevent memory exhaustion. Uncheck\nthis option to disable these memory restrictions.\n",
                "default" : true,
                "configKeys" : [ "limit_memory_per_column" ]
              },
              "limitScannedRows" : {
                "type" : "boolean",
                "title" : "Limit scanned rows",
                "description" : "If enabled, only the specified number of input <i>rows</i> are used to analyze the file (i.e to\ndetermine the column types). This option is recommended for long files where the first <i>n</i> rows are\nrepresentative for the whole file. The \"Skip first data rows\" option has no effect on the scanning. Note\nalso, that this option and the \"Limit number of rows\" option are independent from each other, i.e., if\nthe value in \"Limit number of rows\" is smaller than the value specified here, we will still read as many\nrows as specified here.\n",
                "default" : true,
                "configKeys" : [ "limit_data_rows_scanned" ]
              },
              "maxDataRowsScanned" : {
                "type" : "integer",
                "format" : "int64",
                "default" : 10000,
                "minimum" : 0.0,
                "configKeys" : [ "max_data_rows_scanned" ]
              },
              "maxNumChunksPerFile" : {
                "type" : "integer",
                "format" : "int32",
                "default" : 8,
                "configKeys" : [ "max_num_chunks_per_file" ]
              },
              "maximumNumberOfColumns" : {
                "type" : "integer",
                "format" : "int32",
                "title" : "Maximum number of columns",
                "description" : "Sets the number of allowed columns (default 8192 columns) to prevent memory exhaustion. The node will\nfail if the number of columns exceeds the set limit.\n",
                "default" : 8192,
                "minimum" : 0.0,
                "configKeys" : [ "maximum_number_of_columns" ]
              },
              "minChunkSizeInBytes" : {
                "type" : "integer",
                "format" : "int64",
                "default" : 67108864,
                "configKeys" : [ "min_chunk_size_in_bytes" ]
              },
              "quotedStringsContainNoRowDelimiters" : {
                "type" : "boolean",
                "title" : "Quoted strings contain no row delimiters",
                "description" : "Check this box if there are no quotes that contain row delimiters inside the files. Row delimiters\nshould not be inside of quotes for parallel reading of individual files.\n",
                "default" : false,
                "configKeys" : [ "no_row_delimiters_in_quotes" ]
              },
              "quotedStringsOption" : {
                "oneOf" : [ {
                  "const" : "REMOVE_QUOTES_AND_TRIM",
                  "title" : "Remove quotes and trim whitespace"
                }, {
                  "const" : "KEEP_QUOTES",
                  "title" : "Keep quotes"
                } ],
                "title" : "Quoted strings",
                "description" : "Specifies the behavior in case there are quoted strings in the input table.\n<ul>\n<li><b>Remove quotes and trim whitespace</b>: Quotes will be removed from the value followed by trimming any leading/trailing whitespaces.</li>\n<li><b>Keep quotes</b>: Quotes of a value will be kept. Note: No trimming will be done inside the quotes.</li>\n</ul>",
                "default" : "REMOVE_QUOTES_AND_TRIM",
                "configKeys" : [ "quote_option" ]
              },
              "replaceEmptyQuotedStringsByMissingValues" : {
                "type" : "boolean",
                "title" : "Replace empty quoted string by missing values",
                "description" : "Select this box if you want <b>quoted</b> empty strings to be replaced by missing value cells.",
                "default" : true,
                "configKeys" : [ "replace_empty_quotes_with_missing" ]
              },
              "thousandsSeparator" : {
                "type" : "string",
                "title" : "Thousands separator",
                "description" : "Specifies the thousands separator character for parsing numbers. The thousands separator is used for\ninteger, long and double parsing. Note that the thousands separator must differ from the decimal\nseparator. It is possible to leave the thousands separator unspecified.\n",
                "default" : "",
                "configKeys" : [ "thousands_separator" ]
              }
            },
            "default" : {
              "howToCombineColumns" : "FAIL",
              "appendPathColumn" : false,
              "filePathColumnName" : "File Path",
              "limitScannedRows" : true,
              "maxDataRowsScanned" : 10000,
              "limitMemoryPerColumn" : true,
              "maximumNumberOfColumns" : 8192,
              "quotedStringsOption" : "REMOVE_QUOTES_AND_TRIM",
              "replaceEmptyQuotedStringsByMissingValues" : true,
              "quotedStringsContainNoRowDelimiters" : false,
              "minChunkSizeInBytes" : 67108864,
              "maxNumChunksPerFile" : 8,
              "thousandsSeparator" : "",
              "decimalSeparator" : ".",
              "ifSchemaChangesOption" : "FAIL"
            },
            "configKeys" : [ "advanced_settings" ]
          },
          "encoding" : {
            "type" : "object",
            "properties" : {
              "charset" : {
                "type" : "object",
                "properties" : {
                  "customEncoding" : {
                    "type" : "string",
                    "title" : "Custom encoding",
                    "description" : "A custom character set used to read a CSV file.",
                    "default" : ""
                  },
                  "fileEncoding" : {
                    "oneOf" : [ {
                      "const" : "DEFAULT",
                      "title" : ""
                    }, {
                      "const" : "ISO_8859_1",
                      "title" : ""
                    }, {
                      "const" : "US_ASCII",
                      "title" : ""
                    }, {
                      "const" : "UTF_8",
                      "title" : ""
                    }, {
                      "const" : "UTF_16",
                      "title" : ""
                    }, {
                      "const" : "UTF_16BE",
                      "title" : ""
                    }, {
                      "const" : "UTF_16LE",
                      "title" : ""
                    }, {
                      "const" : "OTHER",
                      "title" : ""
                    } ],
                    "title" : "File encoding",
                    "description" : "Defines the character set used to read a CSV file that contains characters in a different encoding. You\ncan choose from a list of character encodings (UTF-8, UTF-16, etc.), or specify any other encoding\nsupported by your Java Virtual Machine (VM). The default value uses the default encoding of the Java VM,\nwhich may depend on the locale or the Java property &quot;file.encoding&quot;.\n\n<ul>\n<li><b></b>: Uses the default decoding set by the operating system.</li>\n<li><b></b>: ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</li>\n<li><b></b>: Seven-bit ASCII, also referred to as US-ASCII.</li>\n<li><b></b>: Eight-bit UCS Transformation Format.</li>\n<li><b></b>: Sixteen-bit UCS Transformation Format, byte order identified by an optional byte-order mark in the file.\n</li>\n<li><b></b>: Sixteen-bit UCS Transformation Format, big-endian byte order.</li>\n<li><b></b>: Sixteen-bit UCS Transformation Format, little-endian byte order.</li>\n<li><b></b>: Enter a valid charset name supported by the Java Virtual Machine.</li>\n</ul>",
                    "default" : "DEFAULT"
                  }
                },
                "default" : {
                  "fileEncoding" : "DEFAULT",
                  "customEncoding" : ""
                },
                "configKeys" : [ "charset" ]
              }
            },
            "default" : {
              "charset" : {
                "fileEncoding" : "DEFAULT",
                "customEncoding" : ""
              }
            },
            "configKeys" : [ "encoding" ]
          },
          "limitRows" : {
            "type" : "object",
            "properties" : {
              "limitNumberOfRows" : {
                "type" : "boolean",
                "title" : "Limit number of rows",
                "description" : "If enabled, only the specified number of data rows are read. The column header row (if selected) is not\ntaken into account. Limiting rows prevents parallel reading of individual files.\n",
                "default" : false,
                "configKeys" : [ "limit_data_rows" ]
              },
              "maximumNumberOfRows" : {
                "type" : "integer",
                "format" : "int64",
                "title" : "Maximum number of rows",
                "description" : "Defines the maximum number of rows that are read.",
                "default" : 50,
                "minimum" : 0.0,
                "configKeys" : [ "max_rows" ]
              },
              "skipFirstDataRows" : {
                "type" : "integer",
                "format" : "int64",
                "title" : "Skip first data rows",
                "description" : "Use this option to skip the specified number of valid data rows. This has no effect on which row will be\nchosen as a column header. Skipping rows prevents parallel reading of individual files.\n",
                "default" : 0,
                "minimum" : 0.0,
                "configKeys" : [ "skip_data_rows", "number_of_rows_to_skip" ]
              },
              "skipFirstLines" : {
                "type" : "integer",
                "format" : "int64",
                "title" : "Skip first lines of file",
                "description" : "Use this option to skip lines that do not fit in the table structure (e.g. multi-line comments).\n<br/>\nThe specified number of lines are skipped in the input file before the parsing starts. Skipping lines\nprevents parallel reading of individual files.\n",
                "default" : 0,
                "minimum" : 0.0,
                "configKeys" : [ "skip_lines", "number_of_lines_to_skip" ]
              }
            },
            "default" : {
              "skipFirstLines" : 0,
              "skipFirstDataRows" : 0,
              "limitNumberOfRows" : false,
              "maximumNumberOfRows" : 50
            },
            "configKeys" : [ "limit_rows" ]
          },
          "settings" : {
            "type" : "object",
            "properties" : {
              "autoDetectButton" : {
                "type" : "object",
                "title" : "Autodetect format",
                "description" : "By pressing this button, the format of the file will be guessed automatically. It is not guaranteed that\nthe correct values are being detected.\n"
              },
              "columnDelimiter" : {
                "type" : "string",
                "title" : "Column delimiter",
                "description" : "Defines the character string delimiting columns. Use '\\t' for tab characters. Can get detected\nautomatically.\n",
                "default" : ",",
                "minLength" : 1,
                "configKeys" : [ "column_delimiter" ]
              },
              "commentLineCharacter" : {
                "type" : "string",
                "title" : "Comment line character",
                "description" : "Defines the character indicating line comments.",
                "default" : "#",
                "maxLength" : 1,
                "configKeys" : [ "comment_char" ]
              },
              "customRowDelimiter" : {
                "type" : "string",
                "title" : "Custom row delimiter",
                "description" : "Defines the character to be used as custom row delimiter.",
                "default" : "\n",
                "minLength" : 1,
                "pattern" : ".|[\\t\\r\\n]|\\r\\n",
                "configKeys" : [ "row_delimiter" ]
              },
              "fileSelectionInternal" : {
                "type" : "object",
                "properties" : {
                  "enabledStatus" : {
                    "type" : "boolean",
                    "default" : true,
                    "configKeys" : [ "EnabledStatus" ]
                  },
                  "settingsModelID" : {
                    "type" : "string",
                    "default" : "SMID_ReaderFileChooser",
                    "configKeys" : [ "SettingsModelID" ]
                  }
                },
                "default" : {
                  "settingsModelID" : "SMID_ReaderFileChooser",
                  "enabledStatus" : true
                },
                "configKeys" : [ "file_selection_Internals" ]
              },
              "firstColumnContainsRowIds" : {
                "type" : "boolean",
                "title" : "First column contains RowIDs",
                "description" : "Select this box if the first column contains RowIDs (no duplicates allowed).",
                "default" : false,
                "configKeys" : [ "has_row_id" ]
              },
              "firstRowContainsColumnNames" : {
                "type" : "boolean",
                "title" : "First row contains column names",
                "description" : "Select this box if the first row contains column name headers.",
                "default" : true,
                "configKeys" : [ "has_column_header" ]
              },
              "ifRowHasLessColumnsOption" : {
                "oneOf" : [ {
                  "const" : "FAIL",
                  "title" : "Fail"
                }, {
                  "const" : "INSERT_MISSING",
                  "title" : "Insert missing"
                } ],
                "title" : "If row has fewer columns",
                "description" : "Specifies the behavior in case some rows are shorter than others. \n<ul>\n<li><b>Fail</b>: if there are shorter rows in the input file the node execution fails.</li>\n<li><b>Insert missing</b>: the shorter rows are completed with missing values.</li>\n</ul>",
                "default" : "FAIL",
                "configKeys" : [ "support_short_data_rows" ]
              },
              "numberOfCharactersForAutodetection" : {
                "type" : "integer",
                "format" : "int32",
                "title" : "Number of characters for autodetection",
                "description" : "Specifies on how many characters of the selected file should be used for autodetection. The\nautodetection by default is based on the first 1024 * 1024 characters.\n",
                "default" : 1048576,
                "minimum" : 1.0,
                "configKeys" : [ "autodetect_buffer_size" ]
              },
              "prependFileIndexToRowId" : {
                "type" : "boolean",
                "title" : "Prepend file index to RowID",
                "description" : "Select this box if you want to prepend a prefix that depends on the index of the source file to the\nRowIDs. The prefix for the first file is \"File_0_\", for the second \"File_1_\" and so on. This option is\nuseful if the RowIDs within a single file are unique but the same RowIDs appear in multiple files.\nPrepending the file index prevents parallel reading of individual files.\n",
                "default" : false,
                "configKeys" : [ "prepend_file_idx_to_row_id" ]
              },
              "quoteCharacter" : {
                "type" : "string",
                "title" : "Quote character",
                "description" : "The character indicating quotes. Can get detected automatically.",
                "default" : "\"",
                "maxLength" : 1,
                "configKeys" : [ "quote_char" ]
              },
              "quoteEscapeCharacter" : {
                "type" : "string",
                "title" : "Quote escape character",
                "description" : "The character used for escaping quotes inside an already quoted value. Can get detected\nautomatically.\n",
                "default" : "\"",
                "maxLength" : 1,
                "configKeys" : [ "quote_escape_char" ]
              },
              "rowDelimiterOption" : {
                "oneOf" : [ {
                  "const" : "LINE_BREAK",
                  "title" : "Line break"
                }, {
                  "const" : "CUSTOM",
                  "title" : "Custom"
                } ],
                "title" : "Row delimiter",
                "description" : "Defines the character string delimiting rows. Can get detected automatically.\n<ul>\n<li><b>Line break</b>: Uses the line break character as row delimiter. This option is platform-agnostic.</li>\n<li><b>Custom</b>: Uses the provided string as row delimiter.</li>\n</ul>",
                "default" : "LINE_BREAK",
                "configKeys" : [ "use_line_break_row_delimiter" ]
              },
              "skipEmptyDataRows" : {
                "type" : "boolean",
                "default" : false,
                "configKeys" : [ "skip_empty_data_rows" ]
              },
              "source" : {
                "type" : "object",
                "properties" : {
                  "path" : {
                    "type" : "object",
                    "default" : {
                      "fsCategory" : "LOCAL",
                      "path" : "",
                      "timeout" : 10000,
                      "context" : {
                        "fsToString" : "(LOCAL, )"
                      }
                    }
                  }
                },
                "title" : "Source",
                "description" : "Select a file location which stores the data you want to read. When clicking on the browse button,\nthere are two default file system options to choose from:\n<br/>\n<ul>\n    <li><b>The current Hub space</b>: Allows to select a file relative to the Hub space on which the\n        workflow is run.</li>\n    <li><b>URL</b>: Allows to specify a URL (e.g. file://, http:// or knime:// protocol).</li>\n</ul>\n",
                "default" : {
                  "path" : {
                    "fsCategory" : "LOCAL",
                    "path" : "",
                    "timeout" : 10000,
                    "context" : {
                      "fsToString" : "(LOCAL, )"
                    }
                  }
                },
                "configKeys" : [ "file_selection" ]
              }
            },
            "default" : {
              "source" : {
                "path" : {
                  "fsCategory" : "LOCAL",
                  "path" : "",
                  "timeout" : 10000,
                  "context" : {
                    "fsToString" : "(LOCAL, )"
                  }
                }
              },
              "fileSelectionInternal" : {
                "settingsModelID" : "SMID_ReaderFileChooser",
                "enabledStatus" : true
              },
              "firstRowContainsColumnNames" : true,
              "firstColumnContainsRowIds" : false,
              "ifRowHasLessColumnsOption" : "FAIL",
              "skipEmptyDataRows" : false,
              "prependFileIndexToRowId" : false,
              "commentLineCharacter" : "#",
              "columnDelimiter" : ",",
              "quoteCharacter" : "\"",
              "quoteEscapeCharacter" : "\"",
              "rowDelimiterOption" : "LINE_BREAK",
              "customRowDelimiter" : "\n",
              "numberOfCharactersForAutodetection" : 1048576
            },
            "configKeys" : [ "settings" ]
          },
          "tableSpecConfig" : {
            "type" : "object",
            "properties" : {
              "columnTransformation" : {
                "title" : "Transformations",
                "description" : "Use this option to modify the structure of the table. You can deselect each column to filter it out of the\noutput table, use the arrows to reorder the columns, or change the column name or column type of each\ncolumn. Note that the positions of columns are reset in the dialog if a new file or folder is selected.\nWhether and where to add unknown columns during execution is specified via the special row &lt;any unknown\nnew column&gt;. It is also possible to select the type new columns should be converted to. Note that the\nnode will fail if this conversion is not possible e.g. if the selected type is Integer but the new column is\nof type Double.\n",
                "default" : [ {
                  "columnName" : null,
                  "originalType" : "<default-columntype>",
                  "originalTypeLabel" : "Default columntype",
                  "includeInOutput" : true,
                  "columnRename" : null,
                  "type" : "<default-columntype>"
                } ],
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "columnName" : {
                      "type" : "string"
                    },
                    "columnRename" : {
                      "type" : "string",
                      "title" : "Column name"
                    },
                    "includeInOutput" : {
                      "type" : "boolean",
                      "title" : "Include in output",
                      "default" : false
                    },
                    "originalType" : {
                      "type" : "string"
                    },
                    "originalTypeLabel" : {
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string",
                      "title" : "Column type"
                    }
                  }
                }
              },
              "enforceTypes" : {
                "type" : "boolean",
                "title" : "Enforce types",
                "description" : "Controls how columns whose type changes are dealt with.\nIf selected, the mapping to the KNIME type you configured is attempted.\nThe node will fail if that is not possible.\nIf unselected, the KNIME type corresponding to the new type is used.\n",
                "default" : true
              },
              "persistorSettings" : {
                "type" : "object",
                "properties" : {
                  "appendPathColumn" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "configId" : {
                    "type" : "object",
                    "properties" : {
                      "columnDelimiter" : {
                        "type" : "string",
                        "default" : ","
                      },
                      "commentLineCharacter" : {
                        "type" : "string",
                        "default" : "#"
                      },
                      "customEncoding" : {
                        "type" : "string",
                        "default" : ""
                      },
                      "customRowDelimiter" : {
                        "type" : "string",
                        "default" : "\n"
                      },
                      "decimalSeparator" : {
                        "type" : "string",
                        "default" : "."
                      },
                      "fileEncoding" : {
                        "oneOf" : [ {
                          "const" : "DEFAULT",
                          "title" : ""
                        }, {
                          "const" : "ISO_8859_1",
                          "title" : ""
                        }, {
                          "const" : "US_ASCII",
                          "title" : ""
                        }, {
                          "const" : "UTF_8",
                          "title" : ""
                        }, {
                          "const" : "UTF_16",
                          "title" : ""
                        }, {
                          "const" : "UTF_16BE",
                          "title" : ""
                        }, {
                          "const" : "UTF_16LE",
                          "title" : ""
                        }, {
                          "const" : "OTHER",
                          "title" : ""
                        } ],
                        "default" : "DEFAULT"
                      },
                      "firstColumnContainsRowIds" : {
                        "type" : "boolean",
                        "default" : false
                      },
                      "firstRowContainsColumnNames" : {
                        "type" : "boolean",
                        "default" : true
                      },
                      "limitScannedRows" : {
                        "type" : "boolean",
                        "default" : true
                      },
                      "maxDataRowsScanned" : {
                        "type" : "integer",
                        "format" : "int64",
                        "default" : 10000
                      },
                      "quoteCharacter" : {
                        "type" : "string",
                        "default" : "\""
                      },
                      "quoteEscapeCharacter" : {
                        "type" : "string",
                        "default" : "\""
                      },
                      "quotedStringsOption" : {
                        "oneOf" : [ {
                          "const" : "REMOVE_QUOTES_AND_TRIM",
                          "title" : "Remove quotes and trim whitespace"
                        }, {
                          "const" : "KEEP_QUOTES",
                          "title" : "Keep quotes"
                        } ],
                        "default" : "REMOVE_QUOTES_AND_TRIM"
                      },
                      "replaceEmptyQuotedStringsByMissingValues" : {
                        "type" : "boolean",
                        "default" : true
                      },
                      "rowDelimiterOption" : {
                        "oneOf" : [ {
                          "const" : "LINE_BREAK",
                          "title" : "Line break"
                        }, {
                          "const" : "CUSTOM",
                          "title" : "Custom"
                        } ],
                        "default" : "LINE_BREAK"
                      },
                      "skipFirstDataRows" : {
                        "type" : "integer",
                        "format" : "int64",
                        "default" : 0
                      },
                      "skipFirstLines" : {
                        "type" : "integer",
                        "format" : "int64",
                        "default" : 0
                      },
                      "thousandsSeparator" : {
                        "type" : "string",
                        "default" : ""
                      }
                    },
                    "default" : {
                      "firstRowContainsColumnNames" : true,
                      "firstColumnContainsRowIds" : false,
                      "commentLineCharacter" : "#",
                      "columnDelimiter" : ",",
                      "quoteCharacter" : "\"",
                      "quoteEscapeCharacter" : "\"",
                      "rowDelimiterOption" : "LINE_BREAK",
                      "customRowDelimiter" : "\n",
                      "quotedStringsOption" : "REMOVE_QUOTES_AND_TRIM",
                      "replaceEmptyQuotedStringsByMissingValues" : true,
                      "limitScannedRows" : true,
                      "maxDataRowsScanned" : 10000,
                      "thousandsSeparator" : "",
                      "decimalSeparator" : ".",
                      "fileEncoding" : "DEFAULT",
                      "customEncoding" : "",
                      "skipFirstLines" : 0,
                      "skipFirstDataRows" : 0
                    }
                  },
                  "filePathColumnName" : {
                    "type" : "string",
                    "default" : "File Path"
                  },
                  "fsLocations" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "object"
                    }
                  },
                  "sourceId" : {
                    "type" : "string",
                    "default" : ""
                  },
                  "specs" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "sourceId" : {
                          "type" : "string"
                        },
                        "spec" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "type" : "string"
                              },
                              "type" : {
                                "type" : "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "takeColumnsFrom" : {
                    "oneOf" : [ {
                      "const" : "UNION",
                      "title" : "Union"
                    }, {
                      "const" : "INTERSECTION",
                      "title" : "Intersection"
                    } ],
                    "default" : "UNION"
                  }
                },
                "default" : {
                  "configId" : {
                    "firstRowContainsColumnNames" : true,
                    "firstColumnContainsRowIds" : false,
                    "commentLineCharacter" : "#",
                    "columnDelimiter" : ",",
                    "quoteCharacter" : "\"",
                    "quoteEscapeCharacter" : "\"",
                    "rowDelimiterOption" : "LINE_BREAK",
                    "customRowDelimiter" : "\n",
                    "quotedStringsOption" : "REMOVE_QUOTES_AND_TRIM",
                    "replaceEmptyQuotedStringsByMissingValues" : true,
                    "limitScannedRows" : true,
                    "maxDataRowsScanned" : 10000,
                    "thousandsSeparator" : "",
                    "decimalSeparator" : ".",
                    "fileEncoding" : "DEFAULT",
                    "customEncoding" : "",
                    "skipFirstLines" : 0,
                    "skipFirstDataRows" : 0
                  },
                  "sourceId" : "",
                  "fsLocations" : [ ],
                  "specs" : [ ],
                  "appendPathColumn" : false,
                  "filePathColumnName" : "File Path",
                  "takeColumnsFrom" : "UNION"
                }
              }
            },
            "default" : {
              "persistorSettings" : {
                "configId" : {
                  "firstRowContainsColumnNames" : true,
                  "firstColumnContainsRowIds" : false,
                  "commentLineCharacter" : "#",
                  "columnDelimiter" : ",",
                  "quoteCharacter" : "\"",
                  "quoteEscapeCharacter" : "\"",
                  "rowDelimiterOption" : "LINE_BREAK",
                  "customRowDelimiter" : "\n",
                  "quotedStringsOption" : "REMOVE_QUOTES_AND_TRIM",
                  "replaceEmptyQuotedStringsByMissingValues" : true,
                  "limitScannedRows" : true,
                  "maxDataRowsScanned" : 10000,
                  "thousandsSeparator" : "",
                  "decimalSeparator" : ".",
                  "fileEncoding" : "DEFAULT",
                  "customEncoding" : "",
                  "skipFirstLines" : 0,
                  "skipFirstDataRows" : 0
                },
                "sourceId" : "",
                "fsLocations" : [ ],
                "specs" : [ ],
                "appendPathColumn" : false,
                "filePathColumnName" : "File Path",
                "takeColumnsFrom" : "UNION"
              },
              "enforceTypes" : true,
              "columnTransformation" : [ {
                "columnName" : null,
                "originalType" : "<default-columntype>",
                "originalTypeLabel" : "Default columntype",
                "includeInOutput" : true,
                "columnRename" : null,
                "type" : "<default-columntype>"
              } ]
            },
            "configKeys" : [ "table_spec_config_Internals" ]
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "File",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/source",
        "options" : {
          "format" : "fileChooser",
          "fileExtensions" : [ "csv", "tsv", "txt" ]
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/encoding/properties/charset/properties/fileEncoding",
        "options" : {
          "isAdvanced" : true,
          "possibleValues" : [ {
            "id" : "DEFAULT",
            "text" : "OS default (UTF-8)"
          }, {
            "id" : "ISO_8859_1",
            "text" : "ISO-8859-1"
          }, {
            "id" : "US_ASCII",
            "text" : "US-ASCII"
          }, {
            "id" : "UTF_8",
            "text" : "UTF-8"
          }, {
            "id" : "UTF_16",
            "text" : "UTF-16"
          }, {
            "id" : "UTF_16BE",
            "text" : "UTF-16BE"
          }, {
            "id" : "UTF_16LE",
            "text" : "UTF-16LE"
          }, {
            "id" : "OTHER",
            "text" : "Other"
          } ],
          "format" : "dropDown",
          "showNoneColumn" : false,
          "showRowKeys" : false,
          "showSearch" : true,
          "showMode" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/encoding/properties/charset/properties/customEncoding",
        "options" : {
          "isAdvanced" : true
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/encoding/properties/charset/properties/fileEncoding",
            "schema" : {
              "oneOf" : [ {
                "const" : "OTHER"
              } ]
            }
          }
        }
      } ]
    }, {
      "label" : "File Format",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/limitRows/properties/skipFirstLines"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/commentLineCharacter",
        "options" : {
          "hideOnNull" : false
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/rowDelimiterOption",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/customRowDelimiter",
        "options" : {
          "hideOnNull" : false
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/settings/properties/rowDelimiterOption",
            "schema" : {
              "oneOf" : [ {
                "const" : "CUSTOM"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/columnDelimiter",
        "options" : {
          "hideOnNull" : false
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/quotedStringsContainNoRowDelimiters",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "HorizontalLayout",
        "elements" : [ {
          "type" : "Control",
          "scope" : "#/properties/model/properties/settings/properties/quoteCharacter",
          "options" : {
            "hideOnNull" : false
          }
        }, {
          "type" : "Control",
          "scope" : "#/properties/model/properties/settings/properties/quoteEscapeCharacter",
          "options" : {
            "hideOnNull" : false
          }
        } ]
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/autoDetectButton",
        "options" : {
          "format" : "simpleButton",
          "triggerId" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$AutoDetectButtonRef",
          "icon" : "reload"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/numberOfCharactersForAutodetection",
        "options" : {
          "isAdvanced" : true
        }
      } ]
    }, {
      "label" : "Data Area",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/firstRowContainsColumnNames",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/limitRows/properties/skipFirstDataRows"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/limitRows/properties/limitNumberOfRows",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/limitRows/properties/maximumNumberOfRows",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/limitRows/properties/limitNumberOfRows",
            "schema" : {
              "const" : true
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/firstColumnContainsRowIds",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/ifRowHasLessColumnsOption",
        "options" : {
          "format" : "valueSwitch"
        }
      } ]
    }, {
      "label" : "Values",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/decimalSeparator",
        "options" : {
          "hideOnNull" : false
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/thousandsSeparator"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/replaceEmptyQuotedStringsByMissingValues",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/quotedStringsOption",
        "options" : {
          "isAdvanced" : true,
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      } ]
    }, {
      "label" : "Column and Data Type Detection",
      "type" : "Section",
      "options" : {
        "isAdvanced" : true
      },
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/limitScannedRows",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/maxDataRowsScanned",
        "label" : "",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/advancedSettings/properties/limitScannedRows",
            "schema" : {
              "const" : true
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/ifSchemaChangesOption",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical",
          "disabledOptions" : [ "IGNORE" ]
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn",
        "options" : {
          "format" : "checkbox"
        }
      } ]
    }, {
      "label" : "Multiple File Handling",
      "type" : "Section",
      "options" : {
        "isAdvanced" : true
      },
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/howToCombineColumns",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/settings/properties/prependFileIndexToRowId",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/appendPathColumn",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/advancedSettings/properties/filePathColumnName",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/advancedSettings/properties/appendPathColumn",
            "schema" : {
              "const" : true
            }
          }
        }
      } ]
    }, {
      "label" : "Table Transformation",
      "type" : "Section",
      "description" : "This section lists every column to allow modifying the structure of the output table.\nIt supports reordering, filtering and renaming columns. It is also possible to change the type of the columns.\nNote that the positions of columns are reset in the dialog if a new file or folder is selected.\nWhether and where to add unknown columns during execution is specified via the special item \"Any unknown new column\".\nIt is possible to specify the data type to which new columns should be converted.\nNote that the node will fail if this conversion is not possible e.g. if the selected type is Integer but the new column is of type Double.\n",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/tableSpecConfig/properties/enforceTypes",
        "options" : {
          "format" : "checkbox",
          "hideFlowVariableButton" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/tableSpecConfig/properties/columnTransformation",
        "options" : {
          "detail" : [ {
            "type" : "Control",
            "scope" : "#/properties/columnRename",
            "options" : {
              "hideFlowVariableButton" : true
            },
            "label" : "",
            "rule" : {
              "effect" : "SHOW",
              "condition" : {
                "type" : "AND",
                "conditions" : [ {
                  "scope" : "#/properties/_edit",
                  "schema" : {
                    "const" : true
                  }
                }, {
                  "scope" : "#/properties/columnName",
                  "schema" : {
                    "not" : {
                      "const" : null
                    }
                  }
                } ]
              }
            }
          }, {
            "type" : "Control",
            "scope" : "#/properties/type",
            "options" : {
              "hideFlowVariableButton" : true,
              "choicesProvider" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettingsStateProviders$TypeChoicesProvider",
              "format" : "dropDown",
              "showNoneColumn" : false,
              "showRowKeys" : false,
              "showSearch" : true,
              "showMode" : true
            },
            "label" : "",
            "rule" : {
              "effect" : "SHOW",
              "condition" : {
                "scope" : "#/properties/_edit",
                "schema" : {
                  "const" : true
                }
              }
            }
          } ],
          "arrayElementTitle" : "Column",
          "showSortButtons" : true,
          "hasFixedSize" : true,
          "withEditAndReset" : true,
          "elementCheckboxScope" : "#/properties/includeInOutput",
          "elementTitleProvider" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$TitleProvider",
          "elementSubTitleProvider" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$SubTitleProvider"
        }
      } ]
    } ],
    "initialUpdates" : [ {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/appendPathColumn" ],
      "id" : null,
      "value" : false
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/columnDelimiter" ],
      "id" : null,
      "value" : ","
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/commentLineCharacter" ],
      "id" : null,
      "value" : "#"
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/customEncoding" ],
      "id" : null,
      "value" : ""
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/customRowDelimiter" ],
      "id" : null,
      "value" : "\n"
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/decimalSeparator" ],
      "id" : null,
      "value" : "."
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/fileEncoding" ],
      "id" : null,
      "value" : "DEFAULT"
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/firstColumnContainsRowIds" ],
      "id" : null,
      "value" : false
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/firstRowContainsColumnNames" ],
      "id" : null,
      "value" : true
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/limitScannedRows" ],
      "id" : null,
      "value" : true
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/maxDataRowsScanned" ],
      "id" : null,
      "value" : 10000
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/quoteCharacter" ],
      "id" : null,
      "value" : "\""
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/quoteEscapeCharacter" ],
      "id" : null,
      "value" : "\""
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/quotedStringsOption" ],
      "id" : null,
      "value" : "REMOVE_QUOTES_AND_TRIM"
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/replaceEmptyQuotedStringsByMissingValues" ],
      "id" : null,
      "value" : true
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/rowDelimiterOption" ],
      "id" : null,
      "value" : "LINE_BREAK"
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/skipFirstDataRows" ],
      "id" : null,
      "value" : 0
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/skipFirstLines" ],
      "id" : null,
      "value" : 0
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId/properties/thousandsSeparator" ],
      "id" : null,
      "value" : ""
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/filePathColumnName" ],
      "id" : null,
      "value" : "File Path"
    }, {
      "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/takeColumnsFrom" ],
      "id" : null,
      "value" : "UNION"
    } ],
    "globalUpdates" : [ {
      "trigger" : {
        "id" : "ElementResetButton"
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation", "#/properties/columnName" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$ColumnNameRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation", "#/properties/originalType" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$OriginalTypeRef"
      } ]
    }, {
      "trigger" : {
        "id" : "after-open-dialog",
        "triggerInitially" : true
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettingsReference"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$AppendPathColumnRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/appendPathColumn" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/appendPathColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$AppendPathColumnRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$DecimalSeparatorRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/decimalSeparator" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/decimalSeparator" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$DecimalSeparatorRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$FilePathColumnNameRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/filePathColumnName" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/filePathColumnName" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$FilePathColumnNameRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettingsReference"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettingsReference"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitScannedRowsRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitScannedRows" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitScannedRows" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitScannedRowsRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaxDataRowsScannedRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maxDataRowsScanned" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maxDataRowsScanned" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaxDataRowsScannedRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettingsReference"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$QuotedStringsOptionRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/quotedStringsOption" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/quotedStringsOption" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$QuotedStringsOptionRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$ReplaceEmptyQuotedStringsByMissingValuesRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/replaceEmptyQuotedStringsByMissingValues" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/replaceEmptyQuotedStringsByMissingValues" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$ReplaceEmptyQuotedStringsByMissingValuesRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$ThousandsSeparatorRef",
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/thousandsSeparator" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/thousandsSeparator" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$ThousandsSeparatorRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Encoding$Charset$CustomEncodingRef",
        "scopes" : [ "#/properties/model/properties/encoding/properties/charset/properties/customEncoding" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/encoding/properties/charset/properties/customEncoding" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Encoding$Charset$CustomEncodingRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Encoding$Charset$FileEncodingRef",
        "scopes" : [ "#/properties/model/properties/encoding/properties/charset/properties/fileEncoding" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/encoding/properties/charset/properties/fileEncoding" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Encoding$Charset$FileEncodingRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$LimitRows$SkipFirstDataRowsRef",
        "scopes" : [ "#/properties/model/properties/limitRows/properties/skipFirstDataRows" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/limitRows/properties/skipFirstDataRows" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$LimitRows$SkipFirstDataRowsRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$LimitRows$SkipFirstLinesRef",
        "scopes" : [ "#/properties/model/properties/limitRows/properties/skipFirstLines" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/limitRows/properties/skipFirstLines" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$LimitRows$SkipFirstLinesRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$AutoDetectButtonRef"
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/encoding/properties/charset" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Encoding$CharsetRef"
      }, {
        "scopes" : [ "#/properties/model/properties/limitRows/properties/skipFirstLines" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$LimitRows$SkipFirstLinesRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/numberOfCharactersForAutodetection" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$BufferSizeRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/commentLineCharacter" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$CommentStartRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$ColumnDelimiterRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/columnDelimiter" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/columnDelimiter" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$ColumnDelimiterRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$CommentStartRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/commentLineCharacter" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/commentLineCharacter" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$CommentStartRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$CustomRowDelimiterRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/customRowDelimiter" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/customRowDelimiter" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$CustomRowDelimiterRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettingsReference"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FirstColumnContainsRowIdsRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/firstColumnContainsRowIds" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/firstColumnContainsRowIds" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FirstColumnContainsRowIdsRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FirstRowContainsColumnNamesRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/firstRowContainsColumnNames" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/firstRowContainsColumnNames" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FirstRowContainsColumnNamesRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$QuoteCharacterRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/quoteCharacter" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/quoteCharacter" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$QuoteCharacterRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$QuoteEscapeCharacterRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/quoteEscapeCharacter" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/quoteEscapeCharacter" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$QuoteEscapeCharacterRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$RowDelimiterOptionRef",
        "scopes" : [ "#/properties/model/properties/settings/properties/rowDelimiterOption" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/settings/properties/rowDelimiterOption" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$RowDelimiterOptionRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference",
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/howToCombineColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$HowToCombineColumnsOptionRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettingsReference"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$ColumnNameRef",
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation", "#/properties/columnName" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/limitMemoryPerColumn" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$LimitMemoryPerColumnRef"
      }, {
        "scopes" : [ "#/properties/model/properties/advancedSettings/properties/maximumNumberOfColumns" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$AdvancedSettings$MaximumNumberOfColumnsRef"
      }, {
        "scopes" : [ "#/properties/model/properties/settings/properties/source" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTableReaderNodeSettings$Settings$FileChooserRef"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/persistorSettings/properties/configId" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$PersistorSettings$ConfigIdReference"
      }, {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation", "#/properties/columnName" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$ColumnNameRef"
      } ]
    }, {
      "trigger" : {
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$OriginalTypeLabelRef",
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation", "#/properties/originalTypeLabel" ]
      },
      "dependencies" : [ {
        "scopes" : [ "#/properties/model/properties/tableSpecConfig/properties/columnTransformation", "#/properties/originalTypeLabel" ],
        "id" : "org.knime.base.node.io.filehandling.csv.reader2.CSVTransformationSettings$TransformationElementSettings$OriginalTypeLabelRef"
      } ]
    } ]
  }
}