{
  "data" : {
    "model" : {
      "compositionMode" : "MATCH_ALL",
      "matchingCriteria" : [ {
        "leftTableColumn" : "<row-keys>",
        "rightTableColumn" : "<row-keys>"
      } ],
      "dataCellComparisonMode" : "STRICT",
      "includeMatchesInOutput" : true,
      "includeLeftUnmatchedInOutput" : false,
      "includeRightUnmatchedInOutput" : false,
      "leftColumnSelectionConfig" : {
        "selected" : [ ],
        "mode" : "MANUAL",
        "patternFilter" : {
          "pattern" : "",
          "isCaseSensitive" : true,
          "isInverted" : false
        },
        "manualFilter" : {
          "manuallySelected" : [ "Universe_0_0", "Universe_0_1", "Universe_1_0", "Universe_1_1", "Cluster Membership" ],
          "manuallyDeselected" : [ ],
          "includeUnknownColumns" : true
        },
        "typeFilter" : {
          "selectedTypes" : [ ],
          "typeDisplays" : [ ]
        }
      },
      "rightColumnSelectionConfig" : {
        "selected" : [ ],
        "mode" : "MANUAL",
        "patternFilter" : {
          "pattern" : "",
          "isCaseSensitive" : true,
          "isInverted" : false
        },
        "manualFilter" : {
          "manuallySelected" : [ "Universe_0_0", "Universe_0_1", "Universe_1_0", "Universe_1_1", "Cluster Membership" ],
          "manuallyDeselected" : [ ],
          "includeUnknownColumns" : true
        },
        "typeFilter" : {
          "selectedTypes" : [ ],
          "typeDisplays" : [ ]
        }
      },
      "mergeJoinColumns" : false,
      "duplicateHandling" : "APPEND_SUFFIX",
      "suffix" : " (right)",
      "outputUnmatchedRowsToSeparatePorts" : false,
      "rowKeyFactory" : "CONCATENATE",
      "rowKeySeparator" : "_",
      "outputRowOrder" : "ARBITRARY",
      "maxOpenFiles" : 200,
      "enableHiliting" : false
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "compositionMode" : {
            "oneOf" : [ {
              "const" : "MATCH_ALL",
              "title" : "All of the following"
            }, {
              "const" : "MATCH_ANY",
              "title" : "Any of the following"
            } ],
            "title" : "Match",
            "description" : "Defines the logic for the matching criteria:\n<ul>\n<li><b>All of the following</b>: If selected, joins two rows only when all matching criteria are satisfied</li>\n<li><b>Any of the following</b>: If selected, joins two rows when at least one of the matching criteria is satisfied</li>\n</ul>",
            "default" : "MATCH_ALL"
          },
          "dataCellComparisonMode" : {
            "oneOf" : [ {
              "const" : "STRICT",
              "title" : "Value and type"
            }, {
              "const" : "STRING",
              "title" : "String representation"
            }, {
              "const" : "NUMERIC",
              "title" : "Make integer types compatible"
            } ],
            "title" : "Compare values in join columns by",
            "description" : "Defines how to compare the values in the join columns:\n<ul>\n<li><b>Value and type</b>: Two rows match only if their values in the join columns selected have the same value and type, e.g. Number (integer) values will never match Number (long) values because they have two different types.</li>\n<li><b>String representation</b>: Use this option if you want the values to be converted to string before comparing them. In this way you compare only the value in the selected join columns.</li>\n<li><b>Make integer types compatible</b>: Use this option to ignore type differences between Number (integer) and Number (long) types.</li>\n</ul>",
            "default" : "STRICT"
          },
          "duplicateHandling" : {
            "oneOf" : [ {
              "const" : "APPEND_SUFFIX",
              "title" : "Append custom suffix"
            }, {
              "const" : "DO_NOT_EXECUTE",
              "title" : "Do not execute"
            } ],
            "title" : "If there are duplicate column names",
            "description" : "Defines what should happen if there are column names included in the output that have the same name:\n<ul>\n<li><b>Append custom suffix</b>: Adds the defined custom suffix to the column name of the right table.</li>\n<li><b>Do not execute</b>: Prevents the node to be executed if the columns have the same name.</li>\n</ul>",
            "default" : "APPEND_SUFFIX"
          },
          "enableHiliting" : {
            "type" : "boolean",
            "title" : "Hiliting enabled",
            "description" : "If selected, hiliting rows in the output will hilite the rows in the left and right input tables that contributed to that row. Equally, when hiliting a row in one of the input tables, all rows that the input row contributed to are hilited. Disabling this option reduces the memory footprint of the joiner, the disk footprint of the workflow, and may speed up the execution in cases where main memory is scarce.",
            "default" : false
          },
          "includeLeftUnmatchedInOutput" : {
            "type" : "boolean",
            "title" : "Left unmatched rows",
            "description" : "Include rows from the left input table for which no matching row in the right input table is found.",
            "default" : false
          },
          "includeMatchesInOutput" : {
            "type" : "boolean",
            "title" : "Matching rows",
            "description" : "Include rows that match on the selected column pairs.",
            "default" : true
          },
          "includeRightUnmatchedInOutput" : {
            "type" : "boolean",
            "title" : "Right unmatched rows",
            "description" : "Include rows from the right input table for which no matching row in the left input table is found.",
            "default" : false
          },
          "leftColumnSelectionConfig" : {
            "type" : "object",
            "properties" : {
              "manualFilter" : {
                "type" : "object",
                "properties" : {
                  "includeUnknownColumns" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "manuallyDeselected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "manuallySelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "default" : {
                  "manuallySelected" : [ ],
                  "manuallyDeselected" : [ ],
                  "includeUnknownColumns" : false
                }
              },
              "mode" : {
                "oneOf" : [ {
                  "const" : "MANUAL",
                  "title" : "Manual"
                }, {
                  "const" : "REGEX",
                  "title" : "Regex"
                }, {
                  "const" : "WILDCARD",
                  "title" : "Wildcard"
                }, {
                  "const" : "TYPE",
                  "title" : "Type"
                } ],
                "default" : "MANUAL"
              },
              "patternFilter" : {
                "type" : "object",
                "properties" : {
                  "isCaseSensitive" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "isInverted" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "pattern" : {
                    "type" : "string",
                    "default" : ""
                  }
                },
                "default" : {
                  "pattern" : "",
                  "isCaseSensitive" : false,
                  "isInverted" : false
                }
              },
              "selected" : {
                "default" : [ ],
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "typeFilter" : {
                "type" : "object",
                "properties" : {
                  "selectedTypes" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "typeDisplays" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "text" : {
                          "type" : "string"
                        }
                      }
                    }
                  }
                },
                "default" : {
                  "selectedTypes" : [ ],
                  "typeDisplays" : [ ]
                }
              }
            },
            "title" : "Top input ('left' table)",
            "description" : "Select columns from top input ('left' table) that should be included or excluded in the output table.",
            "default" : {
              "selected" : [ "test1", "test2" ],
              "mode" : "MANUAL",
              "patternFilter" : {
                "pattern" : "",
                "isCaseSensitive" : false,
                "isInverted" : false
              },
              "manualFilter" : {
                "manuallySelected" : [ "test1", "test2" ],
                "manuallyDeselected" : [ ],
                "includeUnknownColumns" : true
              },
              "typeFilter" : {
                "selectedTypes" : [ ],
                "typeDisplays" : [ ]
              }
            }
          },
          "matchingCriteria" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "leftTableColumn" : {
                  "type" : "string",
                  "title" : "Top input ('left' table)",
                  "description" : "Select the column from the top input table that should be used to compare with the column selected for the bottom input.",
                  "default" : "<row-keys>"
                },
                "rightTableColumn" : {
                  "type" : "string",
                  "title" : "Bottom input ('right' table)",
                  "description" : "Select the column from the bottom input table that should be used to compare with the column selected for the top input.",
                  "default" : "<row-keys>"
                }
              }
            },
            "title" : "Join columns",
            "description" : "Defines the columns from the top input ('left' table) and the bottom input ('right' table) that should be used for joining.\nFor two rows to be joined, the row from the left input table must have the same value in column A as the row from the right\n input table in column B. RowIDs can be compared to RowIDs or regular columns, in which case the RowID will be interpreted\n as a string value.\n",
            "default" : [ {
              "leftTableColumn" : "<row-keys>",
              "rightTableColumn" : "<row-keys>"
            } ]
          },
          "maxOpenFiles" : {
            "type" : "integer",
            "format" : "int32",
            "title" : "Maximum number of temporary files",
            "description" : " Defines the number of temporary files that can be created during the join operation and possibly subsequent sorting operations.\n Increase the number of temporary files to improve the performance of the node.\n Be aware that the operating system might impose a limit on the maximum number of open files.\n",
            "default" : 200,
            "minimum" : 3.0
          },
          "mergeJoinColumns" : {
            "type" : "boolean",
            "title" : "Merge join columns",
            "description" : "If selected, the join columns of the right input table are merged into their join partners of the left input table.\nThe merged column is named like the left join column if one of its join partners in the right table has the same name.\nIf the join partners have different names, the merged column is named in the form \"left column=right column\".\n",
            "default" : false
          },
          "outputRowOrder" : {
            "oneOf" : [ {
              "const" : "ARBITRARY",
              "title" : "Arbitrary"
            }, {
              "const" : "LEFT_RIGHT",
              "title" : "Input order"
            } ],
            "title" : "Row order",
            "description" : "Defines the row order for the output table rows.\n<ul>\n<li><b>Arbitrary</b>: The order of the ouput table rows is defined based on the currently available memory. Select this to improve the performance of the node since the output does not have to be sorted. Be aware that it can produce different output orders on consecutive executions.</li>\n<li><b>Input order</b>: Rows are output in three blocks:<ol>                                    <li>matched rows</li>                   <li>unmatched rows from left table</li> <li>unmatched rows from right table</li></ol>                                   Each block is sorted so that rows are sorted based on their position in the left table. In case of rows with the same position in the left table, the sorting is determined by the row position in the right table.</li>\n</ul>",
            "default" : "ARBITRARY"
          },
          "outputUnmatchedRowsToSeparatePorts" : {
            "type" : "boolean",
            "title" : "Split join result into multiple tables",
            "description" : "Output unmatched rows (if selected under \"Include in output\") at the second and third output port, i.e.<ul><li> top: Matching rows </li><li> middle: Left unmatched rows </li><li> bottom: Right unmatched rows </li></ul>",
            "default" : false
          },
          "rightColumnSelectionConfig" : {
            "type" : "object",
            "properties" : {
              "manualFilter" : {
                "type" : "object",
                "properties" : {
                  "includeUnknownColumns" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "manuallyDeselected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "manuallySelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "default" : {
                  "manuallySelected" : [ ],
                  "manuallyDeselected" : [ ],
                  "includeUnknownColumns" : false
                }
              },
              "mode" : {
                "oneOf" : [ {
                  "const" : "MANUAL",
                  "title" : "Manual"
                }, {
                  "const" : "REGEX",
                  "title" : "Regex"
                }, {
                  "const" : "WILDCARD",
                  "title" : "Wildcard"
                }, {
                  "const" : "TYPE",
                  "title" : "Type"
                } ],
                "default" : "MANUAL"
              },
              "patternFilter" : {
                "type" : "object",
                "properties" : {
                  "isCaseSensitive" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "isInverted" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "pattern" : {
                    "type" : "string",
                    "default" : ""
                  }
                },
                "default" : {
                  "pattern" : "",
                  "isCaseSensitive" : false,
                  "isInverted" : false
                }
              },
              "selected" : {
                "default" : [ ],
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "typeFilter" : {
                "type" : "object",
                "properties" : {
                  "selectedTypes" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "typeDisplays" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "string"
                        },
                        "text" : {
                          "type" : "string"
                        }
                      }
                    }
                  }
                },
                "default" : {
                  "selectedTypes" : [ ],
                  "typeDisplays" : [ ]
                }
              }
            },
            "title" : "Bottom input ('right' table)",
            "description" : "Select columns from bottom input ('right' table) that should be included or excluded in the output table.",
            "default" : {
              "selected" : [ "test1", "test2" ],
              "mode" : "MANUAL",
              "patternFilter" : {
                "pattern" : "",
                "isCaseSensitive" : false,
                "isInverted" : false
              },
              "manualFilter" : {
                "manuallySelected" : [ "test1", "test2" ],
                "manuallyDeselected" : [ ],
                "includeUnknownColumns" : true
              },
              "typeFilter" : {
                "selectedTypes" : [ ],
                "typeDisplays" : [ ]
              }
            }
          },
          "rowKeyFactory" : {
            "oneOf" : [ {
              "const" : "CONCATENATE",
              "title" : "Concatenate with separator"
            }, {
              "const" : "SEQUENTIAL",
              "title" : "Create new"
            }, {
              "const" : "KEEP_ROWID",
              "title" : "Retain"
            } ],
            "title" : "RowIDs",
            "description" : "Defines how the RowIDs of the output table are generated:\n<ul>\n<li><b>Concatenate with separator</b>: The RowID of the output table will be made of the RowID of the top input ('left' table) and the RowID of the bottom ('right' table) separated by the defined separator.</li>\n<li><b>Create new</b>: The RowIDs of the output table will be assigned sequential RowIDs, e.g. Row0, Row1, etc.</li>\n<li><b>Retain</b>: If the matching rows have the same RowIDs in both input tables as a matching criteria the output table will keep the input tables RowIDs.</li>\n</ul>",
            "default" : "CONCATENATE"
          },
          "rowKeySeparator" : {
            "type" : "string",
            "title" : "Separator",
            "description" : "The separator to be added in between RowIDs of the input tables to generate the RowIDs of the output table.",
            "default" : "_"
          },
          "suffix" : {
            "type" : "string",
            "title" : "Custom suffix",
            "description" : "The suffix to be added to the column name of the right table",
            "default" : " (Right)"
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "Matching Criteria",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/compositionMode",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/matchingCriteria",
        "options" : {
          "detail" : [ {
            "type" : "HorizontalLayout",
            "elements" : [ {
              "type" : "Control",
              "scope" : "#/properties/leftTableColumn",
              "options" : {
                "choicesProvider" : "org.knime.base.node.preproc.joiner3.Joiner3NodeSettings$LeftTableChoices",
                "format" : "dropDown",
                "showNoneColumn" : false,
                "showRowKeys" : true,
                "showSearch" : true,
                "showMode" : true
              }
            }, {
              "type" : "Control",
              "scope" : "#/properties/rightTableColumn",
              "options" : {
                "choicesProvider" : "org.knime.base.node.preproc.joiner3.Joiner3NodeSettings$RightTableChoices",
                "format" : "dropDown",
                "showNoneColumn" : false,
                "showRowKeys" : true,
                "showSearch" : true,
                "showMode" : true
              }
            } ]
          } ],
          "addButtonText" : "Add matching criterion"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/dataCellComparisonMode"
      } ]
    }, {
      "label" : "Include in Output",
      "type" : "Section",
      "elements" : [ {
        "type" : "VennDiagram",
        "elements" : [ {
          "type" : "Control",
          "scope" : "#/properties/model/properties/includeMatchesInOutput",
          "options" : {
            "format" : "checkbox"
          }
        }, {
          "type" : "Control",
          "scope" : "#/properties/model/properties/includeLeftUnmatchedInOutput",
          "options" : {
            "format" : "checkbox"
          }
        }, {
          "type" : "Control",
          "scope" : "#/properties/model/properties/includeRightUnmatchedInOutput",
          "options" : {
            "format" : "checkbox"
          }
        } ]
      } ]
    }, {
      "label" : "Output Columns",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/leftColumnSelectionConfig",
        "options" : {
          "format" : "columnFilter",
          "choicesProvider" : "org.knime.base.node.preproc.joiner3.Joiner3NodeSettings$LeftTableChoices",
          "showNoneColumn" : false,
          "showRowKeys" : false,
          "showSearch" : true,
          "showMode" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/rightColumnSelectionConfig",
        "options" : {
          "format" : "columnFilter",
          "choicesProvider" : "org.knime.base.node.preproc.joiner3.Joiner3NodeSettings$RightTableChoices",
          "showNoneColumn" : false,
          "showRowKeys" : false,
          "showSearch" : true,
          "showMode" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/mergeJoinColumns",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/duplicateHandling",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/suffix",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/duplicateHandling",
            "schema" : {
              "oneOf" : [ {
                "const" : "APPEND_SUFFIX"
              } ]
            }
          }
        }
      } ]
    }, {
      "label" : "Output Rows",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/outputUnmatchedRowsToSeparatePorts",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/rowKeyFactory",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/rowKeySeparator",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/rowKeyFactory",
            "schema" : {
              "oneOf" : [ {
                "const" : "CONCATENATE"
              } ]
            }
          }
        }
      } ]
    }, {
      "label" : "Performance",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/outputRowOrder",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/maxOpenFiles"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/enableHiliting",
        "options" : {
          "format" : "checkbox"
        }
      } ]
    } ]
  },
  "persist" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "compositionMode" : { },
          "matchingCriteria" : {
            "type" : "array",
            "deprecatedConfigKeys" : [ {
              "new" : [ [ ] ],
              "deprecated" : [ [ "leftTableJoinPredicate" ], [ "rightTableJoinPredicate" ] ]
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "leftTableColumn" : { },
                "rightTableColumn" : { }
              }
            }
          },
          "dataCellComparisonMode" : { },
          "includeMatchesInOutput" : { },
          "includeLeftUnmatchedInOutput" : { },
          "includeRightUnmatchedInOutput" : { },
          "leftColumnSelectionConfig" : {
            "configPaths" : [ [ "leftColumnSelectionConfig", "filter-type" ], [ "leftColumnSelectionConfig", "included_names" ], [ "leftColumnSelectionConfig", "excluded_names" ], [ "leftColumnSelectionConfig", "enforce_option" ], [ "leftColumnSelectionConfig", "name_pattern", "pattern" ], [ "leftColumnSelectionConfig", "name_pattern", "type" ], [ "leftColumnSelectionConfig", "name_pattern", "caseSensitive" ], [ "leftColumnSelectionConfig", "name_pattern", "excludeMatching" ] ],
            "type" : "object",
            "properties" : {
              "selected" : {
                "configPaths" : [ ]
              },
              "mode" : { },
              "patternFilter" : {
                "type" : "object",
                "properties" : {
                  "pattern" : { },
                  "isCaseSensitive" : { },
                  "isInverted" : { }
                }
              },
              "manualFilter" : {
                "type" : "object",
                "properties" : {
                  "manuallySelected" : { },
                  "manuallyDeselected" : { },
                  "includeUnknownColumns" : { }
                }
              },
              "typeFilter" : {
                "type" : "object",
                "properties" : {
                  "selectedTypes" : { },
                  "typeDisplays" : {
                    "type" : "array",
                    "configPaths" : [ ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : { },
                        "text" : { }
                      }
                    }
                  }
                }
              }
            }
          },
          "rightColumnSelectionConfig" : {
            "configPaths" : [ [ "rightColumnSelectionConfig", "filter-type" ], [ "rightColumnSelectionConfig", "included_names" ], [ "rightColumnSelectionConfig", "excluded_names" ], [ "rightColumnSelectionConfig", "enforce_option" ], [ "rightColumnSelectionConfig", "name_pattern", "pattern" ], [ "rightColumnSelectionConfig", "name_pattern", "type" ], [ "rightColumnSelectionConfig", "name_pattern", "caseSensitive" ], [ "rightColumnSelectionConfig", "name_pattern", "excludeMatching" ] ],
            "type" : "object",
            "properties" : {
              "selected" : {
                "configPaths" : [ ]
              },
              "mode" : { },
              "patternFilter" : {
                "type" : "object",
                "properties" : {
                  "pattern" : { },
                  "isCaseSensitive" : { },
                  "isInverted" : { }
                }
              },
              "manualFilter" : {
                "type" : "object",
                "properties" : {
                  "manuallySelected" : { },
                  "manuallyDeselected" : { },
                  "includeUnknownColumns" : { }
                }
              },
              "typeFilter" : {
                "type" : "object",
                "properties" : {
                  "selectedTypes" : { },
                  "typeDisplays" : {
                    "type" : "array",
                    "configPaths" : [ ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "id" : { },
                        "text" : { }
                      }
                    }
                  }
                }
              }
            }
          },
          "mergeJoinColumns" : { },
          "duplicateHandling" : { },
          "suffix" : { },
          "outputUnmatchedRowsToSeparatePorts" : { },
          "rowKeyFactory" : { },
          "rowKeySeparator" : { },
          "outputRowOrder" : { },
          "maxOpenFiles" : { },
          "enableHiliting" : { }
        }
      }
    }
  },
  "initialUpdates" : [ {
    "scopes" : null,
    "id" : "org.knime.base.node.preproc.joiner3.Joiner3NodeSettings$LeftTableChoices",
    "values" : [ {
      "indices" : [ ],
      "value" : [ {
        "id" : "test1",
        "text" : "test1"
      }, {
        "id" : "test2",
        "text" : "test2"
      } ]
    } ]
  }, {
    "scopes" : null,
    "id" : "org.knime.base.node.preproc.joiner3.Joiner3NodeSettings$RightTableChoices",
    "values" : [ {
      "indices" : [ ],
      "value" : [ {
        "id" : "test1",
        "text" : "test1"
      }, {
        "id" : "test2",
        "text" : "test2"
      } ]
    } ]
  } ]
}