{
  "data" : {
    "model" : {
      "pattern" : "(.*)",
      "caseMatching" : "CASESENSITIVE",
      "requireWholeMatch" : true,
      "noMatchBehaviour" : "INSERT_MISSING",
      "isUnixLines" : false,
      "isMultiLine" : false,
      "isDotAll" : false,
      "isUnicodeCase" : false,
      "isCanonEQ" : false,
      "isUnicodeCharacterClass" : false,
      "decrementGroupIndexByOne" : false,
      "output" : {
        "mode" : "COLUMNS",
        "columnPrefixMode" : "INPUT_COL_NAME",
        "columnPrefix" : "Split ",
        "singleOutputColumnMode" : "APPEND",
        "columnName" : "Split",
        "groupLabels" : "CAPTURE_GROUP_NAMES",
        "removeInputColumn" : false
      },
      "doNotAllowEmptyBlankOrPaddedColumnName" : true,
      "isLiteral" : false,
      "isComments" : false
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "caseMatching" : {
            "oneOf" : [ {
              "const" : "CASESENSITIVE",
              "title" : "Case sensitive"
            }, {
              "const" : "CASEINSENSITIVE",
              "title" : "Case insensitive"
            } ],
            "title" : "Case sensitive",
            "description" : "Specifies whether matching will distinguish between upper and lower case letters. <br />\nBy default, case-insensitive matching assumes that only characters in the US-ASCII charset are being\nmatched. Unicode-aware case-insensitive matching can be enabled by enabling\n<i>Unicode-aware case folding</i>. <br />\nMatching case-insensitive may impose a slight performance penalty.\n",
            "default" : "CASESENSITIVE"
          },
          "column" : {
            "type" : "string",
            "title" : "String column",
            "description" : "Choose the column containing the strings to split"
          },
          "decrementGroupIndexByOne" : {
            "type" : "boolean",
            "title" : "Start group index counting from zero",
            "description" : "If enabled, the indices of non-named capturing groups start at zero instead of one.\nThis setting is not meant to be manually enabled, but exists solely for the purpose of\nbackwards-compatibility. Earlier versions of this node have this enabled to reflect how the node used to\nbehave.",
            "default" : false
          },
          "doNotAllowEmptyBlankOrPaddedColumnName" : {
            "type" : "boolean",
            "default" : true
          },
          "isCanonEQ" : {
            "type" : "boolean",
            "title" : "Enable canonical equivalence",
            "description" : "When enabled, two characters will be considered to match if, and only if, their full canonical\ndecompositions match. The expression \"a\\u030A\", for example, will match the string \"\\u00E5\" when this is\nenabled. By default, matching does not take canonical equivalence into account.",
            "default" : false
          },
          "isComments" : {
            "type" : "boolean",
            "default" : false
          },
          "isDotAll" : {
            "type" : "boolean",
            "title" : "Enable dotall mode (Dot . also matches newline characters)",
            "description" : "In dotall mode, the expression . matches any character, including a line terminator. By default this\nexpression does not match line terminators.",
            "default" : false
          },
          "isLiteral" : {
            "type" : "boolean",
            "default" : false
          },
          "isMultiLine" : {
            "type" : "boolean",
            "title" : "Enable multiline mode (^ and $ match at the beginning / end of a line)",
            "description" : "In multiline mode the expressions ^ and $ match just after or just before, respectively, a line\nterminator or the end of the input sequence. By default these expressions only match at the beginning\nand the end of the entire input sequence.",
            "default" : false
          },
          "isUnicodeCase" : {
            "type" : "boolean",
            "title" : "Enable Unicode-aware case folding",
            "description" : "When this is enabled then case-insensitive matching, when enabled, is done in a manner consistent with the\nUnicode Standard. By default, case-insensitive matching assumes that only characters in the US-ASCII charset\nare being matched. <br />\nEnabling this may impose a performance penalty.",
            "default" : false
          },
          "isUnicodeCharacterClass" : {
            "type" : "boolean",
            "title" : "Enable Unicode character classes",
            "description" : "When enabled, the (US-ASCII only) <i>Predefined character classes</i> and <i>POSIX character classes</i> are\nin conformance with the Unicode Standard. <br />\nEnabling this may impose a performance penalty.",
            "default" : false
          },
          "isUnixLines" : {
            "type" : "boolean",
            "title" : "Enable Unix lines mode",
            "description" : "In this mode, only the '\\n' line terminator is recognized in the behavior of ., ^, and $.",
            "default" : false
          },
          "noMatchBehaviour" : {
            "oneOf" : [ {
              "const" : "INSERT_MISSING",
              "title" : "Insert missing value"
            }, {
              "const" : "INSERT_EMPTY",
              "title" : "Insert empty string"
            }, {
              "const" : "FAIL",
              "title" : "Fail"
            } ],
            "title" : "If pattern does not match",
            "description" : "Define what to do if a pattern can't be matched to the input string:\n<ul>\n    <li><i>Insert missing value</i> puts missing cell(s) in place of the output column(s).\n        The node will emit a warning when an input string doesn't match.</li>\n    <li><i>Insert empty string</i> puts empty string(s) in place of the output column(s).\n        The node will emit a warning when an input string doesn't match.</li>\n    <li><i>Fail</i> causes the node to fail if one of the inputs can not be matched against the pattern.\n    </li>\n</ul>\n",
            "default" : "INSERT_MISSING"
          },
          "output" : {
            "type" : "object",
            "properties" : {
              "columnName" : {
                "type" : "string",
                "title" : "Output column name",
                "description" : "Choose a name for the output column",
                "default" : "Split"
              },
              "columnPrefix" : {
                "type" : "string",
                "title" : "Custom prefix",
                "description" : "Define a custom column prefix.",
                "default" : "Split "
              },
              "columnPrefixMode" : {
                "oneOf" : [ {
                  "const" : "INPUT_COL_NAME",
                  "title" : "Input column name"
                }, {
                  "const" : "CUSTOM",
                  "title" : "Custom"
                }, {
                  "const" : "NONE",
                  "title" : "None"
                } ],
                "title" : "Output column prefix",
                "description" : "Define what prefix should be used for the output column names:\n<ul>\n    <li><i>Input column name</i>: The name of the column containing the string to split is used as a prefix.\n        </li>\n    <li><i>Custom</i>: Define a custom string that shall be used as a prefix.</li>\n    <li><i>None</i>: No prefix is added.</li>\n</ul>\n",
                "default" : "INPUT_COL_NAME"
              },
              "groupLabels" : {
                "oneOf" : [ {
                  "const" : "CAPTURE_GROUP_NAMES",
                  "title" : "Capture group names or indices"
                }, {
                  "const" : "SPLIT_INPUT_COL_NAME",
                  "title" : "Split input column name"
                } ],
                "title" : "Group labels in output",
                "description" : "Define the naming of the output groups:\n<ul>\n    <li><i>Capture group names or indices</i>: Use the names of the capture groups. For unnamed capture\n        groups, their index is used as their label.</li>\n    <li><i>Split input column name</i>: Apply the provided pattern to the name of the input column and\n        use the captures as labels.</li>\n</ul>\n\nThe impact of this setting depends on the selected <i>Output mode</i>:\n<ul>\n    <li><i>Columns</i>: The labels will be used as the suffix of the column names.</li>\n    <li><i>Rows</i>: The labels will be used as the suffix of the row IDs.</li>\n    <li><i>List</i> and <i>Set</i>: The labels will be used as element names in the collection cell\n        specification.</li>\n</ul>\n",
                "default" : "CAPTURE_GROUP_NAMES"
              },
              "mode" : {
                "oneOf" : [ {
                  "const" : "COLUMNS",
                  "title" : "Columns"
                }, {
                  "const" : "ROWS",
                  "title" : "Rows"
                }, {
                  "const" : "LIST",
                  "title" : "List"
                }, {
                  "const" : "SET",
                  "title" : "Set (remove duplicates)"
                } ],
                "title" : "Output matched groups as",
                "description" : "Define how to output the results:\n<ul>\n    <li><i>Columns</i>: Each capture group in the defined pattern creates a new column in the output table.\n    The column names correspond to the names of the named capture groups.</li>\n    <li><i>Rows</i>: Each input row is duplicated by the number of capture groups, and every capture is\n    added to one of those copies.</li>\n    <li><i>List</i>: The captures are appended to the input as a list of strings.</li>\n    <li><i>Set (remove duplicates)</i>: The captures are appended to the input as a set of strings. Note\n    that duplicates are removed and the order of captures is not preserved.</li>\n</ul>\n",
                "default" : "COLUMNS"
              },
              "removeInputColumn" : {
                "type" : "boolean",
                "title" : "Remove input column",
                "description" : "Remove the input column from the output table.",
                "default" : false
              },
              "singleOutputColumnMode" : {
                "oneOf" : [ {
                  "const" : "APPEND",
                  "title" : "Append"
                }, {
                  "const" : "REPLACE",
                  "title" : "Replace"
                } ],
                "title" : "Output column",
                "description" : "Choose whether to append the output column or replace the input column.",
                "default" : "APPEND"
              }
            },
            "default" : {
              "mode" : "COLUMNS",
              "columnPrefixMode" : "INPUT_COL_NAME",
              "columnPrefix" : "Split ",
              "singleOutputColumnMode" : "APPEND",
              "columnName" : "Split",
              "groupLabels" : "CAPTURE_GROUP_NAMES",
              "removeInputColumn" : false
            }
          },
          "pattern" : {
            "type" : "string",
            "title" : "Pattern",
            "description" : "Define a pattern according to which the input string will be split. The capture groups that are defined in\nthis pattern will correspond to the output values. A group can be defined in one of two ways:\n<ul>\n    <li>For a named group, define <tt>(?&lt;groupName&gt;pattern)</tt>,\n    where <tt>groupName</tt> is the name of the group and <tt>pattern</tt> can be replaced by any regular\n    expression that should be matched. Note that group names need to start with a letter and may\n    contain only letters and digits, no spaces.</li>\n    <li>For an unnamed capture group, simply use parenthesis around your pattern:\n    <tt>(pattern)</tt>, where again <tt>pattern</tt> can be replaced by any\n    pattern. Unnamed capture groups are simply identified by their position in the pattern string, and they\n    are enumerated starting at 1.</li>\n</ul>\nIf you want to use non-capturing groups, construct them with\n<tt>(?:pattern)</tt>\n",
            "default" : "(.*)"
          },
          "requireWholeMatch" : {
            "type" : "boolean",
            "title" : "Require whole string to match",
            "description" : "If enabled, the provided pattern must match the whole string in order to return any results. Otherwise, the\nfirst match in the input string is used.\n",
            "default" : true
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "Splitting",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/column",
        "options" : {
          "choicesProvider" : "org.knime.core.webui.node.dialog.defaultdialog.widget.choices.column.CompatibleColumnsProvider$StringColumnsProvider",
          "format" : "dropDown"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/pattern",
        "options" : {
          "validations" : [ {
            "errorMessage" : "The field cannot be empty (it must contain at least one character).",
            "id" : "pattern",
            "parameters" : {
              "pattern" : ".+"
            }
          } ]
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/caseMatching",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/requireWholeMatch",
        "options" : {
          "format" : "checkbox"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/noMatchBehaviour",
        "options" : {
          "format" : "valueSwitch"
        }
      } ]
    }, {
      "label" : "Splitting (Advanced)",
      "type" : "Section",
      "options" : {
        "isAdvanced" : true
      },
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/isUnixLines",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/isMultiLine",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/isDotAll",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/isUnicodeCase",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/isCanonEQ",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/isUnicodeCharacterClass",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/decrementGroupIndexByOne",
        "options" : {
          "format" : "checkbox",
          "isAdvanced" : true
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/output/properties/groupLabels",
            "schema" : {
              "oneOf" : [ {
                "const" : "CAPTURE_GROUP_NAMES"
              } ]
            }
          }
        }
      } ]
    }, {
      "label" : "Output",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/mode",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/columnPrefixMode",
        "options" : {
          "format" : "valueSwitch"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/output/properties/mode",
            "schema" : {
              "oneOf" : [ {
                "const" : "COLUMNS"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/columnPrefix",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "type" : "AND",
            "conditions" : [ {
              "scope" : "#/properties/model/properties/output/properties/mode",
              "schema" : {
                "oneOf" : [ {
                  "const" : "COLUMNS"
                } ]
              }
            }, {
              "scope" : "#/properties/model/properties/output/properties/columnPrefixMode",
              "schema" : {
                "oneOf" : [ {
                  "const" : "CUSTOM"
                } ]
              }
            } ]
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/singleOutputColumnMode",
        "options" : {
          "format" : "valueSwitch"
        },
        "rule" : {
          "effect" : "HIDE",
          "condition" : {
            "scope" : "#/properties/model/properties/output/properties/mode",
            "schema" : {
              "oneOf" : [ {
                "const" : "COLUMNS"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/columnName",
        "options" : {
          "validations" : [ {
            "errorMessage" : "The string must start and end with a non-whitespace character.",
            "id" : "pattern",
            "parameters" : {
              "pattern" : "\\S(.*\\S)?"
            }
          } ]
        },
        "rule" : {
          "effect" : "HIDE",
          "condition" : {
            "type" : "OR",
            "conditions" : [ {
              "scope" : "#/properties/model/properties/output/properties/singleOutputColumnMode",
              "schema" : {
                "oneOf" : [ {
                  "const" : "REPLACE"
                } ]
              }
            }, {
              "scope" : "#/properties/model/properties/output/properties/mode",
              "schema" : {
                "oneOf" : [ {
                  "const" : "COLUMNS"
                } ]
              }
            } ]
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/groupLabels",
        "options" : {
          "isAdvanced" : true,
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/output/properties/removeInputColumn",
        "options" : {
          "format" : "checkbox"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/output/properties/mode",
            "schema" : {
              "oneOf" : [ {
                "const" : "COLUMNS"
              } ]
            }
          }
        }
      } ]
    } ]
  },
  "persist" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "column" : {
            "configPaths" : [ [ "column" ] ]
          },
          "pattern" : {
            "configPaths" : [ [ "pattern" ] ]
          },
          "caseMatching" : {
            "configPaths" : [ [ "isCaseInsensitive" ] ]
          },
          "requireWholeMatch" : { },
          "noMatchBehaviour" : { },
          "isUnixLines" : {
            "configPaths" : [ [ "isUnixLines" ] ]
          },
          "isMultiLine" : {
            "configPaths" : [ [ "isMultiLine" ] ]
          },
          "isDotAll" : {
            "configPaths" : [ [ "isDotAll" ] ]
          },
          "isUnicodeCase" : {
            "configPaths" : [ [ "isUniCodeCase" ] ]
          },
          "isCanonEQ" : {
            "configPaths" : [ [ "isCanonEQ" ] ]
          },
          "isUnicodeCharacterClass" : {
            "configPaths" : [ [ "isUnicodeCharacterClass" ] ]
          },
          "decrementGroupIndexByOne" : {
            "deprecatedConfigKeys" : [ {
              "deprecated" : [ ]
            } ]
          },
          "output" : {
            "type" : "object",
            "properties" : {
              "mode" : { },
              "columnPrefixMode" : { },
              "columnPrefix" : { },
              "singleOutputColumnMode" : { },
              "columnName" : { },
              "groupLabels" : { },
              "removeInputColumn" : { }
            },
            "deprecatedConfigKeys" : [ {
              "deprecated" : [ ]
            } ]
          },
          "doNotAllowEmptyBlankOrPaddedColumnName" : {
            "configPaths" : [ ]
          },
          "isLiteral" : {
            "configPaths" : [ [ "isLiteral" ] ]
          },
          "isComments" : {
            "configPaths" : [ [ "isComments" ] ]
          }
        }
      }
    }
  },
  "initialUpdates" : [ {
    "scopes" : null,
    "id" : "org.knime.core.webui.node.dialog.defaultdialog.widget.choices.column.CompatibleColumnsProvider$StringColumnsProvider",
    "values" : [ {
      "indices" : [ ],
      "value" : [ ]
    } ]
  } ]
}