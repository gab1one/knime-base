{
  "data" : {
    "model" : {
      "selectedColumns" : {
        "mode" : "MANUAL",
        "patternFilter" : {
          "pattern" : "",
          "isCaseSensitive" : false,
          "isInverted" : false
        },
        "manualFilter" : {
          "manuallySelected" : [ ],
          "manuallyDeselected" : [ ],
          "includeUnknownColumns" : true
        },
        "typeFilter" : {
          "selectedTypes" : [ ],
          "typeDisplays" : [ ]
        }
      },
      "binningType" : "EQUAL_FREQUENCY",
      "numberOfBins" : 20,
      "customCutoffs" : [ {
        "cutoff" : 0.0,
        "matchType" : "TO_LOWER_BIN"
      } ],
      "customQuantiles" : [ {
        "quantile" : 0.0,
        "matchType" : "TO_LOWER_BIN"
      } ],
      "enforceIntegerCutoffs" : false,
      "fixLowerBound" : true,
      "fixedLowerBound" : 1.1,
      "fixUpperBound" : false,
      "fixedUpperBound" : 0.0,
      "binNames" : "BORDERS",
      "prefix" : "Bin ",
      "lowerOutlierValue" : "small",
      "upperOutlierValue" : "Upper outlier",
      "replaceOrAppend" : "APPEND",
      "suffix" : "_disc"
    }
  },
  "schema" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "binNames" : {
            "oneOf" : [ {
              "const" : "NUMBERED",
              "title" : "Numbered"
            }, {
              "const" : "BORDERS",
              "title" : "Borders"
            }, {
              "const" : "MIDPOINTS",
              "title" : "Midpoints"
            } ],
            "title" : "Bin names/values",
            "description" : "Selects how bins are labeled in the output. Use a 'Number Format Manager' node to customize number formatting.\n<ul>\n<li><b>Numbered</b>: Bins are labeled by index (e.g., Bin 1, Bin 2).</li>\n<li><b>Borders</b>: Bins are labeled using interval borders (e.g., [0.0, 1.0)).</li>\n<li><b>Midpoints</b>: Bins are labeled using the midpoint of each interval.</li>\n</ul>",
            "default" : "NUMBERED"
          },
          "binningType" : {
            "oneOf" : [ {
              "const" : "EQUAL_WIDTH",
              "title" : "Equal width"
            }, {
              "const" : "EQUAL_FREQUENCY",
              "title" : "Equal frequency"
            }, {
              "const" : "CUSTOM_CUTOFFS",
              "title" : "Custom cutoffs"
            }, {
              "const" : "CUSTOM_QUANTILES",
              "title" : "Custom quantiles"
            } ],
            "title" : "Binning type",
            "description" : "Select the method used to define bin intervals.\n<ul>\n<li><b>Equal width</b>: Creates bins of equal size across the value range. Requires a specified number of bins.\n</li>\n<li><b>Equal frequency</b>: Creates bins with approximately the same number of values. Requires a specified number of bins.\n</li>\n<li><b>Custom cutoffs</b>: Manually define bin edges using a list of cutoff values. At least two cutoffs are required.\n</li>\n<li><b>Custom quantiles</b>: Define bin edges based on quantile values. At least two quantiles are required. Quantiles are converted to bin edges using the R-7 algorithm, see <a href=\"\nhttps://en.wikipedia.org/wiki/Quantile\">WP:Quantile</a> for more details. Note that when setting an upper or lower bound values outside the bounds are considered when calculating the quantiles.\n</li>\n</ul>",
            "default" : "EQUAL_WIDTH"
          },
          "customCutoffs" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "cutoff" : {
                  "type" : "number",
                  "format" : "double",
                  "title" : "Cutoff",
                  "description" : "Specifies the exact value at which the bin boundary should be placed.\n",
                  "default" : 0.0
                },
                "matchType" : {
                  "oneOf" : [ {
                    "const" : "TO_LOWER_BIN",
                    "title" : "To lower bin"
                  }, {
                    "const" : "TO_UPPER_BIN",
                    "title" : "To upper bin"
                  } ],
                  "title" : "Exact match",
                  "description" : "Defines how to assign values that match a cutoff exactly.\n\n<ul>\n<li><b>To lower bin</b>: Assign to the bin below the cutoff.</li>\n<li><b>To upper bin</b>: Assign to the bin above the cutoff.</li>\n</ul>",
                  "default" : "TO_LOWER_BIN"
                }
              }
            },
            "title" : "Custom cutoffs",
            "description" : "Specifies the exact value at which the bin boundary should be placed.\n",
            "default" : [ {
              "cutoff" : 0.0,
              "matchType" : "TO_LOWER_BIN"
            } ]
          },
          "customQuantiles" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "matchType" : {
                  "oneOf" : [ {
                    "const" : "TO_LOWER_BIN",
                    "title" : "To lower bin"
                  }, {
                    "const" : "TO_UPPER_BIN",
                    "title" : "To upper bin"
                  } ],
                  "title" : "Exact match",
                  "description" : "Defines how to assign values that match a cutoff exactly.\n\n<ul>\n<li><b>To lower bin</b>: Assign to the bin below the cutoff.</li>\n<li><b>To upper bin</b>: Assign to the bin above the cutoff.</li>\n</ul>",
                  "default" : "TO_LOWER_BIN"
                },
                "quantile" : {
                  "type" : "number",
                  "format" : "double",
                  "title" : "Quantile",
                  "description" : "Specifies a quantile value (between 0 and 1) used as a bin boundary.\n",
                  "default" : 0.0
                }
              }
            },
            "title" : "Custom quantiles",
            "description" : "The bin boundaries may be defined manually by entering the quantiles. The behaviour when a value is exactly equal to a quantile can be configured separately for each quantile.\n",
            "default" : [ {
              "quantile" : 0.0,
              "matchType" : "TO_LOWER_BIN"
            } ]
          },
          "enforceIntegerCutoffs" : {
            "type" : "boolean",
            "title" : "Enforce integer cutoffs",
            "description" : "If enabled, bin boundaries will be rounded to the nearest integer. Not available when using custom cutoffs.\n",
            "default" : false
          },
          "fixLowerBound" : {
            "type" : "boolean",
            "title" : "Fix lower bound",
            "description" : "If enabled, values below the specified lower bound will be assigned to a dedicated outlier bin. The bin will have the name specified by the 'Lower outlier value' setting.\n",
            "default" : false
          },
          "fixUpperBound" : {
            "type" : "boolean",
            "title" : "Fix upper bound",
            "description" : "If enabled, values above the specified upper bound will be assigned to a dedicated outlier bin. The bin will have the name specified by the 'Upper outlier value' setting.\n",
            "default" : false
          },
          "fixedLowerBound" : {
            "type" : "number",
            "format" : "double",
            "title" : "Lower bound",
            "description" : "Sets the minimum value for binning. Values below this will be assigned to the lower outlier bin.\n",
            "default" : 0.0
          },
          "fixedUpperBound" : {
            "type" : "number",
            "format" : "double",
            "title" : "Upper bound",
            "description" : "Sets the maximum value for binning. Values above this will be assigned to the upper outlier bin.\n",
            "default" : 0.0
          },
          "lowerOutlierValue" : {
            "type" : "string",
            "title" : "Lower outlier value",
            "description" : "Label assigned to values below the fixed lower bound.",
            "default" : "Lower outlier"
          },
          "numberOfBins" : {
            "type" : "integer",
            "format" : "int32",
            "title" : "Number of bins",
            "description" : "Specifies the number of bins to create. Used with Equal width and Equal frequency binning.\n",
            "default" : 20
          },
          "prefix" : {
            "type" : "string",
            "title" : "Prefix",
            "description" : "Text to prepend to bin labels when using numbered naming (e.g., Bin 1, Bin 2).\n",
            "default" : "Bin "
          },
          "replaceOrAppend" : {
            "oneOf" : [ {
              "const" : "REPLACE",
              "title" : "Replace"
            }, {
              "const" : "APPEND",
              "title" : "Append with suffix"
            } ],
            "title" : "Output columns",
            "description" : "Whether to replace the original columns with the binned columns, or to append the binned columns with new names created by appending the specified suffix to the original column names.\n\n<ul>\n<li><b>Replace</b>: Replaces the original column with the binned result.</li>\n<li><b>Append with suffix</b>: Adds a new column with the binned values.</li>\n</ul>",
            "default" : "REPLACE"
          },
          "selectedColumns" : {
            "type" : "object",
            "properties" : {
              "manualFilter" : {
                "type" : "object",
                "properties" : {
                  "includeUnknownColumns" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "manuallyDeselected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "manuallySelected" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "default" : {
                  "manuallySelected" : [ ],
                  "manuallyDeselected" : [ ],
                  "includeUnknownColumns" : false
                }
              },
              "mode" : {
                "oneOf" : [ {
                  "const" : "MANUAL",
                  "title" : "Manual"
                }, {
                  "const" : "REGEX",
                  "title" : "Regex"
                }, {
                  "const" : "WILDCARD",
                  "title" : "Wildcard"
                }, {
                  "const" : "TYPE",
                  "title" : "Type"
                } ],
                "default" : "MANUAL"
              },
              "patternFilter" : {
                "type" : "object",
                "properties" : {
                  "isCaseSensitive" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "isInverted" : {
                    "type" : "boolean",
                    "default" : false
                  },
                  "pattern" : {
                    "type" : "string",
                    "default" : ""
                  }
                },
                "default" : {
                  "pattern" : "",
                  "isCaseSensitive" : false,
                  "isInverted" : false
                }
              },
              "selected" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "typeFilter" : {
                "type" : "object",
                "properties" : {
                  "selectedTypes" : {
                    "default" : [ ],
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "default" : {
                  "selectedTypes" : [ ],
                  "typeDisplays" : [ ]
                }
              }
            },
            "title" : "Columns to bin",
            "description" : "Select the numeric columns to apply binning to. Only the selected columns will be transformed.\n",
            "default" : {
              "mode" : "MANUAL",
              "patternFilter" : {
                "pattern" : "",
                "isCaseSensitive" : false,
                "isInverted" : false
              },
              "manualFilter" : {
                "manuallySelected" : [ "test1" ],
                "manuallyDeselected" : [ ],
                "includeUnknownColumns" : true
              },
              "typeFilter" : {
                "selectedTypes" : [ ],
                "typeDisplays" : [ ]
              }
            }
          },
          "suffix" : {
            "type" : "string",
            "title" : "Suffix",
            "description" : "Text appended to column names when new columns are created using the Append option.",
            "default" : " (Binned)"
          },
          "upperOutlierValue" : {
            "type" : "string",
            "title" : "Upper outlier value",
            "description" : "Label assigned to values above the fixed upper bound.",
            "default" : "Upper outlier"
          }
        }
      }
    }
  },
  "ui_schema" : {
    "elements" : [ {
      "label" : "Binning",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/selectedColumns",
        "options" : {
          "format" : "typedStringFilter",
          "unknownValuesText" : "Any unknown column",
          "emptyStateLabel" : "No columns in this list."
        },
        "providedOptions" : [ "possibleValues" ]
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/binningType",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/numberOfBins",
        "options" : {
          "validation" : {
            "max" : {
              "errorMessage" : "The value must not exceed 2147483647.",
              "parameters" : {
                "isExclusive" : false,
                "max" : 2.147483647E9
              }
            },
            "min" : {
              "errorMessage" : "The value must be at least 1.",
              "parameters" : {
                "isExclusive" : false,
                "min" : 1.0
              }
            }
          }
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binningType",
            "schema" : {
              "not" : {
                "oneOf" : [ {
                  "const" : "CUSTOM_CUTOFFS"
                }, {
                  "const" : "CUSTOM_QUANTILES"
                } ]
              }
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/customCutoffs",
        "options" : {
          "detail" : [ {
            "type" : "Control",
            "scope" : "#/properties/cutoff"
          }, {
            "type" : "Control",
            "scope" : "#/properties/matchType",
            "options" : {
              "format" : "valueSwitch"
            }
          } ],
          "addButtonText" : "New cutoff",
          "arrayElementTitle" : "Cutoff",
          "showSortButtons" : true
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binningType",
            "schema" : {
              "oneOf" : [ {
                "const" : "CUSTOM_CUTOFFS"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/customQuantiles",
        "options" : {
          "detail" : [ {
            "type" : "Control",
            "scope" : "#/properties/quantile",
            "options" : {
              "validation" : {
                "max" : {
                  "errorMessage" : "The value must not exceed 1.",
                  "parameters" : {
                    "isExclusive" : false,
                    "max" : 1.0
                  }
                },
                "min" : {
                  "errorMessage" : "The value must be at least 0.",
                  "parameters" : {
                    "isExclusive" : false,
                    "min" : 0.0
                  }
                }
              }
            }
          }, {
            "type" : "Control",
            "scope" : "#/properties/matchType",
            "options" : {
              "format" : "valueSwitch"
            }
          } ],
          "addButtonText" : "New quantile",
          "arrayElementTitle" : "Quantile",
          "showSortButtons" : true
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binningType",
            "schema" : {
              "oneOf" : [ {
                "const" : "CUSTOM_QUANTILES"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/enforceIntegerCutoffs",
        "options" : {
          "format" : "checkbox"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binningType",
            "schema" : {
              "not" : {
                "oneOf" : [ {
                  "const" : "CUSTOM_CUTOFFS"
                } ]
              }
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/fixLowerBound",
        "options" : {
          "format" : "checkbox"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binningType",
            "schema" : {
              "not" : {
                "oneOf" : [ {
                  "const" : "CUSTOM_CUTOFFS"
                } ]
              }
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/fixedLowerBound",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "type" : "AND",
            "conditions" : [ {
              "scope" : "#/properties/model/properties/binningType",
              "schema" : {
                "not" : {
                  "oneOf" : [ {
                    "const" : "CUSTOM_CUTOFFS"
                  } ]
                }
              }
            }, {
              "scope" : "#/properties/model/properties/fixLowerBound",
              "schema" : {
                "const" : true
              }
            } ]
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/fixUpperBound",
        "options" : {
          "format" : "checkbox"
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binningType",
            "schema" : {
              "not" : {
                "oneOf" : [ {
                  "const" : "CUSTOM_CUTOFFS"
                } ]
              }
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/fixedUpperBound",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "type" : "AND",
            "conditions" : [ {
              "scope" : "#/properties/model/properties/binningType",
              "schema" : {
                "not" : {
                  "oneOf" : [ {
                    "const" : "CUSTOM_CUTOFFS"
                  } ]
                }
              }
            }, {
              "scope" : "#/properties/model/properties/fixUpperBound",
              "schema" : {
                "const" : true
              }
            } ]
          }
        }
      } ]
    }, {
      "label" : "Output",
      "type" : "Section",
      "elements" : [ {
        "type" : "Control",
        "scope" : "#/properties/model/properties/binNames",
        "options" : {
          "format" : "radio",
          "radioLayout" : "vertical"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/prefix",
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/binNames",
            "schema" : {
              "oneOf" : [ {
                "const" : "NUMBERED"
              } ]
            }
          }
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/lowerOutlierValue"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/upperOutlierValue"
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/replaceOrAppend",
        "options" : {
          "format" : "valueSwitch"
        }
      }, {
        "type" : "Control",
        "scope" : "#/properties/model/properties/suffix",
        "options" : {
          "validation" : {
            "minLength" : {
              "errorMessage" : "The field cannot be empty (it must contain at least one character).",
              "parameters" : {
                "minLength" : 1
              }
            }
          }
        },
        "rule" : {
          "effect" : "SHOW",
          "condition" : {
            "scope" : "#/properties/model/properties/replaceOrAppend",
            "schema" : {
              "oneOf" : [ {
                "const" : "APPEND"
              } ]
            }
          }
        }
      } ]
    } ]
  },
  "persist" : {
    "type" : "object",
    "properties" : {
      "model" : {
        "type" : "object",
        "properties" : {
          "selectedColumns" : {
            "type" : "object",
            "properties" : {
              "selected" : {
                "configPaths" : [ ]
              },
              "mode" : { },
              "patternFilter" : {
                "type" : "object",
                "properties" : {
                  "pattern" : { },
                  "isCaseSensitive" : { },
                  "isInverted" : { }
                }
              },
              "manualFilter" : {
                "type" : "object",
                "properties" : {
                  "manuallySelected" : { },
                  "manuallyDeselected" : { },
                  "includeUnknownColumns" : { }
                }
              },
              "typeFilter" : {
                "type" : "object",
                "properties" : {
                  "selectedTypes" : { }
                }
              }
            }
          },
          "binningType" : { },
          "numberOfBins" : { },
          "customCutoffs" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "cutoff" : { },
                "matchType" : { }
              }
            }
          },
          "customQuantiles" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "quantile" : { },
                "matchType" : { }
              }
            }
          },
          "enforceIntegerCutoffs" : { },
          "fixLowerBound" : {
            "configKey" : "fixedLowerBound_is_present"
          },
          "fixedLowerBound" : { },
          "fixUpperBound" : {
            "configKey" : "fixedUpperBound_is_present"
          },
          "fixedUpperBound" : { },
          "binNames" : { },
          "prefix" : { },
          "lowerOutlierValue" : { },
          "upperOutlierValue" : { },
          "replaceOrAppend" : { },
          "suffix" : { }
        }
      }
    }
  },
  "initialUpdates" : [ {
    "scope" : "#/properties/model/properties/selectedColumns",
    "providedOptionName" : "possibleValues",
    "values" : [ {
      "indices" : [ ],
      "value" : [ {
        "id" : "test1",
        "text" : "test1",
        "type" : {
          "id" : "org.knime.core.data.DoubleValue",
          "text" : "Number (Float)"
        }
      } ]
    } ]
  } ]
}