<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="stringreplace.png" type="Manipulator" xmlns="http://knime.org/node/v4.1" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
    <name>String Replacer</name>

    <shortDescription>Replaces strings if they match a certain pattern.</shortDescription>

    <fullDescription>
        <intro>
        	This node replaces strings in a selected target column.
			In the configuration dialog, a pattern and a replacement text are specified.
			If the pattern doesn't match, the result string equals the input string.
			You can choose to modify strings in-place or add the result strings to a new column.
		</intro>
        <option name="Target column">Select the column in which the strings should be replaced.</option>
		<option name="Pattern type">
			Select the type of pattern which you want to use.
			<ul>
				<li><i>Literal</i> matches the pattern as is.</li>
				<li>
					<i>Wildcard</i>	matches	<tt>*</tt> to zero or more arbitrary characters and matches	<tt>?</tt> to
					any single character.
				</li>
				<li>
					<i>Regular expression</i>
					matches using the full functionality of Java regular expressions, including backreferences in the
					replacement text. See the
					<a href="http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html">Java API</a> for 
					details.
				</li>
			</ul>
        </option>
        <option name="Use backslash as escape character">
        	Only relevant for wildcard matching.
            If checked, the backslash character can be used to escape special characters. For instance, <tt>\?</tt>
            will match the literal character <tt>?</tt> instead of an arbitrary character. In order to match a
            backslash you need to escape the backslash, too (<tt>\\</tt>).
        </option>
        <option name="Case sensitive">
        	If checked, the matching will distinguish between upper and lower case letters.
        </option>
        <option name="Pattern">
            A literal string, wildcard pattern or regular expression, depending on the pattern type selected above.
        </option>
        <option name="Replacement text">
            The text that replaces that previous value in the cell if the pattern matched it. If you are using a
            regular expression, you may also use backreferences (e.g. <tt>$1</tt> to refer to the first capture group,
            named capture groups can also be used with <tt>(?&lt;group&gt;)</tt> and <tt>${group}</tt> to refer to
            them).
        </option>
        <option name="Replacement strategy">
        	Select what to replace in case a string matches a pattern.
			<ul>
				<li>
					<i>Whole string</i> replaces the entire string with the replacement string, requiring an exact
					match of the whole string.
				</li>
				<li>
                    <i>All occurrences</i> replaces all occurrences of the pattern with the replacement string. Note
                    that when e.g. matching on the RegEx-pattern '.*', an empty string at the end of the input is also
                    matched and replaced. To avoid that, use e.g. the pattern '^.*' to indicate that the match has to
                    start at the beginning.
				</li>
			</ul>
        </option>
        <option name="Append new column">
			If enabled, the strings will not be replaced in-place but a new column is appended that contains the
			original string with the replacement applied.
        </option>
        <option name="New column name">
			The name of the created column with replaced strings, only relevant if <i>Append new column</i> is enabled.
        </option>
    </fullDescription>

    <ports>
        <inPort index="0" name="Input">
        The input table contains the string column to perform the replacement on.
        </inPort>
        <outPort index="0" name="Input with replaced strings">
            Input table with updated string column or an additional column.
        </outPort>
    </ports>
    <keywords>
    	<keyword>RegEx</keyword>
    	<keyword>Find replace</keyword>
    </keywords>
</knimeNode>
