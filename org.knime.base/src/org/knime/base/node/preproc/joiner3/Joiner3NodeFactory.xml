<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="./joiner.png" type="Manipulator" xmlns="http://knime.org/node/v4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
    <name>Joiner</name>
    <shortDescription>Combine matching rows from two tables</shortDescription>
    <fullDescription>
        <intro>
            This node combines two tables similar to a join in a database. It combines each row from the top input port
            with each row from the bottom input port that has identical values in selected columns. 
            Rows that remain unmatched can also be output.
        </intro>
        <tab name="Joiner settings">
            <option name="Join Columns">
                Select the columns from the top input ('left' table) and the bottom input 
                ('right' table) that should be used for joining. Each pair of columns defines an equality constraint
                of the form A = B. For two rows to be joined, the row from the left input table
                must have the same value in column A as the row from the right input table in column B.
				Row keys can be compared to row keys or regular columns, in which case the row key will be interpreted 
				as a string value. 
                <br/>
                <b>Match all:</b> If selected, two rows must agree in all selected join columns to be matched.<br/>
                <b>Match any:</b> If selected, two rows must agree in at least one selected join column to be matched.
                <br/>
                <b>Compare values in join columns:</b> If <i>value and type</i> is selected, two rows match only if
                their join columns agree both in value and type, e.g., integer values will never match long values. If
                <i>make integer types compatible</i> is selected, cells are compared by their long value representation,
                if available. For instance, integer cells will will match long cells with equal values. If
                <i>string representation</i> is selected, the join columns are converted to string prior to comparison. 
            </option>
            <option name="Include in output">
                Select which rows are included in the join result. <br/>
                <b>Matching rows:</b> If selected, the joined rows are included in the output.
                Deactivating this can be used to find only the rows that do not have a join partner in the other table. 
                <br/>
                <b>Left unmatched rows:</b> Whether to include the rows from the left table for which no row
                in the right table has the same values in the selected join columns. For example, including only matches
                 and left unmatched rows corresponds to a left outer join in database terms.
                 <br/>
                 <b>Right unmatched rows:</b> Whether to include unmatched rows from the right input table.
                 For example, including only right unmatched rows corresponds to a right antijoin in database terms.
            </option>        
            <option name="Output options">
                Select the format in which the join results are output and whether hiliting is enabled.  
                <br/>
                <b>Split join result into multiple tables:</b>
                If selected, the node will produce three output tables instead of one. The top output port contains
                the joined rows (matches only), the middle output port contains the unmatched rows from the left input 
                table, and the bottom port contains the unmatched rows from the right input table.
                Note that empty tables will be produced for join result types (i.e., matches, left unmatched rows, 
                right unmatched rows) that are not selected for inclusion in the output.
                <br/>
                <b>Merge join columns:</b> 
                If active, the join columns of the right input table are merged into their join partners of the left 
                input table. The merged column is named like the left join column if one of its join partners in the 
                right table has the same name. If the join partners have different names, the merged column is named
                in the form <i>left column=right column</i>.<br/>
                For instance, when joining a table with columns A, B, and C as left input table with a table
                that has columns X, A, and Z using the join predicates A=A, A=X, and C=Z, the resulting output table 
                would have columns A, B, C=Z. Note how the column A in the output table contains the value of the column
                A in the left table, which is also the value of the column X in the right table, as required by the join conditions  A=X.<br/>
                The value of a merged join column for an unmatched row is taken from whichever row has values.
                For instance, when outputting an unmatched row from the right table in the above example with values x, a, and z, 
                the resulting row in format A, B, C=Z has values x, ?, z. <br/> When merge join columns is off, the row is
                instead output as ?, ?, ?, x, a, z. <br/>
                <b>Hiliting enabled:</b> If selected, hiliting rows in the output will hilite the rows in the left and 
                right input tables that contributed to that row. Equally, when hiliting a row in one of the input tables,
                all rows that the input row contributed to are hilited.<br/> Disabling this option reduces the memory 
                footprint of the joiner, the disk footprint of the workflow, and may speed up the execution in cases 
                where main memory is scarce.
            </option>
            <option name="Row Keys">
                How to generate the keys of the combined output rows.<br/>
                <b>Concatenate original row keys with separator:</b> The generated row key concatenates the row
				keys of the input rows, e.g., a row joining rows with key Row3 and Row17 is assigned the key Row3_Row17. 
                <br/>
                <b>Assign new row keys sequentially: </b> Combined rows are assigned row keys in the order they are 
                produced, e.g., the first row in the join result is assigned row key Row0, the second row is assigned
                key Row1, etc.
                <br/>
            </option>        
        </tab>
        <tab name="Column selection">
            <option name="Column Selection (Top Input (left table) and Bottom Input (right table))">
                <b>Include:</b> Select columns that are included in the combined rows.
                <br/>
                <b>Exclude:</b> Select columns that are discarded in the combined rows.
                <br/>
            </option>        
            <option name="Duplicate column names">
                The option configures how column names clashes are handled, in case
				a column name appears both in the left input table and the right input table. 
                <br/>
                <b>Do not execute:</b> The node will display a warning and won't execute if there are
                duplicate column names in the left and right input tables.  
                <br/>
                <b>Append suffix:</b> Append the specified suffix to the duplicate column names
                in the right input table.
            </option>
        </tab>
        <tab name="Performance">
            <option name="Output order">
                 <b>Arbitrary output order:</b> The execution time of the join can be improved if the output does not have
                 to be sorted. The produced order can vary between any two executions of the joiner and depends on how
                 much main memory is available during the join operation.
                <br/>
                <b>Sort by row offset in left table, then right table:</b> The combined rows in the output are sorted 
                according to the offsets of the contributing rows. Consider a row R=(L1, R1) in the output that combines rows L1 and R1 from the left and right 
                input tables, respectively. R comes before another row S=(L2, R2) in the output if L1 comes
                before L2 in the left table. If two rows in the output both involve the same row from the left table,
                they are ordered according to the order of the right contributing row. <br/>
                If the results are output in a single port, the matching rows are first output, then the unmatched rows 
                from the left table, and finally the unmatched rows from the right table. <br/>
                This output order is the same as in the previous joiner implementation. 
            </option>        
            <option name="Miscellaneous">
                 <b>Maximum number of open files:</b> Controls the number of temporary files that can be created during
                 the join operation and possibly subsequent sorting operations. More temporary files may increase 
                 performance, but the operating system might impose a limit on the maximum number of open files.
            </option>
        </tab>

		<link href="https://www.knime.com/knime-introductory-course/chapter3/section3/joins">
			KNIME E-Learning Course: Join: inner join, right outer join, left outer join, full outer join
		</link>
    </fullDescription>
    <ports>
        <inPort index="0" name="Left table">Left input table</inPort>
        <inPort index="1" name="Right table">Right input table</inPort>
        <outPort index="0" name="Join result">Either all results or the result of the inner join (if the unmatched rows are output in separate ports)</outPort>
        <outPort index="1" name="Left unmatched rows">Unmatched rows from the left input table (top input port). Inactive if "Output unmatched rows to separate ports" is deactivated.</outPort>
        <outPort index="2" name="Right unmatched rows">Unmatched rows from the right input table (bottom input port). Inactive if "Output unmatched rows to separate ports" is deactivated.</outPort>
    </ports>
</knimeNode>
