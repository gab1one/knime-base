/*
 * ------------------------------------------------------------------------
 *  Copyright by KNIME AG, Zurich, Switzerland
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME AG herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * -------------------------------------------------------------------
 *
 * History
 *   Jun 19, 2022 (Dragan Keselj, KNIME GmbH): created
 */
package org.knime.base.node.io.filehandling.arff.writer;

import java.io.Closeable;
import java.io.IOException;
import java.io.Writer;
import java.util.Date;

import org.knime.core.data.DataCell;
import org.knime.core.data.DataColumnSpec;
import org.knime.core.data.DataRow;
import org.knime.core.data.DataTable;
import org.knime.core.data.DataTableSpec;
import org.knime.core.data.DataType;
import org.knime.core.data.DoubleValue;
import org.knime.core.data.IntValue;
import org.knime.core.data.StringValue;
import org.knime.core.node.BufferedDataTable;
import org.knime.core.node.ExecutionMonitor;

/**
 * Class to write a {@link DataTable} to a ARFF file
 *
 * @author Dragan Keselj, KNIME GmbH
 */
final class ARFFWriter2 implements Closeable {

    private final Writer m_writer;

    private final ARFFWriter2Config m_config;

    /**
     * @param writer
     * @param config
     */
    ARFFWriter2(final Writer writer, final ARFFWriter2Config config) {
        if (config == null) {
            throw new NullPointerException("The ARFFWriter doesn't accept null settings.");
        }
        m_writer = writer;
        m_config = config;
    }

    void write(final BufferedDataTable table, final ExecutionMonitor execMonitor) throws IOException {

        final DataTableSpec inSpec = table.getDataTableSpec();
        int numOfCols = inSpec.getNumColumns();

        // Write ARFF header
        m_writer.write("%\n");
        m_writer.write("% ARFF data file, generated by KNIME\n");
        m_writer.write("%\n");
        m_writer.write("% Date: " + new Date(System.currentTimeMillis()) + "\n");
        try {
            m_writer.write("% User: " + System.getProperty("user.name") + "\n");
        } catch (SecurityException se) {
            // okay - we don't add the user name.
        }
        m_writer.write("%\n");

        m_writer.write("\n@RELATION " + m_config.getRelationName() + "\n");

        // write the attribute part, i.e. the columns' name and type
        for (int c = 0; c < numOfCols; c++) {
            DataColumnSpec cSpec = inSpec.getColumnSpec(c);
            m_writer.write("@ATTRIBUTE ");
            if (needsQuotes(cSpec.getName().toString())) {
                m_writer.write("'" + cSpec.getName().toString() + "'");
            } else {
                m_writer.write(cSpec.getName().toString());
            }
            m_writer.write("\t");
            m_writer.write(colspecToARFFType(cSpec));
            m_writer.write("\n");
        }

        // finally add the data
        m_writer.write("\n@DATA\n");
        long rowCnt = table.size();
        long rowNr = 0;
        for (DataRow row : table) {

            rowNr++;
            execMonitor.setProgress(rowNr / (double)rowCnt, "Writing row " + rowNr
                    + " ('" + row.getKey() + "') of " + rowCnt);

            if (m_config.isSparse()) {
                m_writer.write("{");
            }
            boolean first = true; // flag to skip comma in first column
            for (int c = 0; c < row.getNumCells(); c++) {
                DataCell cell = row.getCell(c);

                if (m_config.isSparse() && !cell.isMissing()) {
                    // we write only non-zero values in a sparse file
                    if ((cell instanceof IntValue) && (((IntValue)cell).getIntValue() == 0)) {
                        continue;
                    }
                    if ((cell instanceof DoubleValue) && (Math.abs(((DoubleValue)cell).getDoubleValue()) < 1e-29)) {
                        continue;
                    }
                }

                String data = "?";
                if (!cell.isMissing()) {
                    data = cell.toString();
                }

                // see if we need to quote it. A space, tab, etc. or a comma
                // trigger quotes.
                if (needsQuotes(data)) {
                    data = "'" + data + "'";
                }

                // now spit it out
                if (!first) {
                    // print column separator
                    m_writer.write(",");
                } else {
                    first = false;
                }

                // data in sparse file must be proceeded by the column number
                if (m_config.isSparse()) {
                    m_writer.write("" + c + " ");
                }

                m_writer.write(data);

            } // for (all cells of this row)

            if (m_config.isSparse()) {
                m_writer.write("}");
            }
            m_writer.write("\n");
        }
    }

    /*
     * returns true if the specified string contains characters below the ASCII
     * 20 or a comma.
     */
    private static boolean needsQuotes(final String str) {
        for (int s = 0; s < str.length(); s++) {
            if ((str.charAt(s) <= 32) || (str.charAt(s) == ',')) {
                return true;
            }
        }
        return false;
    }

    /*
     * translates the KNIME type into a string suitable for the <datatype>
     * argument to the "@attribute" statement. It will return one of the
     * following strings: "STRING", "REAL", "INTEGER", or "{ <values>}" with
     * <values> being a comma separated list of all possible values of that
     * column.
     */
    private static String colspecToARFFType(final DataColumnSpec cSpec) {

        DataType type = cSpec.getType();

        // first try integer, as it is the "simplest" representation
        if (type.isCompatible(IntValue.class)) {
            return "INTEGER";
        }
        // now double, adding "only" some decimal places...
        if (type.isCompatible(DoubleValue.class)) {
            return "REAL";
        }

        // that's all we can handle
        assert type.isCompatible(StringValue.class);

        if ((cSpec.getDomain().getValues() == null)
                || (cSpec.getDomain().getValues().size() == 0)) {
            return "STRING";
        }

        // here we have to build the list of all nominal values.
        String nomValues = "{";
        for (DataCell cell : cSpec.getDomain().getValues()) {
            String value = cell.toString();
            if (needsQuotes(value)) {
                nomValues += "'" + value + "',";
            } else {
                nomValues += value + ",";
            }
        }
        // cut off the last comma and add a closing braket.
        return nomValues.subSequence(0, nomValues.length() - 1) + "}";
    }

    @Override
    public void close() throws IOException {
        m_writer.close();
    }

}
