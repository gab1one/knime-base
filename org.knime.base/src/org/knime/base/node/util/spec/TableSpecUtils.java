/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME AG, Zurich, Switzerland
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME AG herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 * History
 *   Mar 19, 2021 (Mark Ortmann, KNIME GmbH, Berlin, Germany): created
 */
package org.knime.base.node.util.spec;

import java.util.ArrayList;
import java.util.function.Consumer;
import java.util.stream.IntStream;

import org.knime.core.data.DataTableSpec;
import org.knime.core.data.DataValue;
import org.knime.core.node.InvalidSettingsException;

/**
 * Utility class that allows to extract the column indices from a {@link DataTableSpec} that is compatible with a
 * certain {@link DataValue}.
 *
 * @author Mark Ortmann, KNIME GmbH, Berlin, Germany
 */
public final class TableSpecUtils {

    private TableSpecUtils() {
        // utility class
    }

    /**
     * Finds all columns that are compatible with the provided {@link DataValue} and returns their indices.
     *
     * @param spec the {@link DataTableSpec}
     * @param clazz the {@link DataValue} class the column type has to be compatible to
     * @return indices of all columns that are compatible with the provided type
     */
    public static int[] findAllCompatibleColumns(final DataTableSpec spec, final Class<? extends DataValue> clazz) {
        return IntStream.range(0, spec.getNumColumns())//
            .filter(i -> spec.getColumnSpec(i).getType().isCompatible(clazz))//
            .toArray();
    }

    /**
     * Finds from a list of candidate columns all those columns that are compatible to the provided {@link DataValue}
     * and returns their column indices.
     *
     * @param spec the {@link DataTableSpec}
     * @param candidateCols the columns to test for compatibility and existence
     * @param clazz the {@link DataValue} class the column type has to be compatible to
     * @param warningConsumer a {@link Consumer} that accepts all warnings generated by this method
     * @return indices of all columns that have been kept
     * @throws InvalidSettingsException - If any of the candidates is not contained in the spec
     */
    public static int[] findCompatibleColumns(final DataTableSpec spec, final String[] candidateCols,
        final Class<? extends DataValue> clazz, final Consumer<String> warningConsumer)
        throws InvalidSettingsException {
        final ArrayList<Integer> indices = new ArrayList<>();
        for (final String inclCol : candidateCols) {
            final int colIdx = spec.findColumnIndex(inclCol);
            if (colIdx >= 0) {
                if (spec.getColumnSpec(colIdx).getType().isCompatible(clazz)) {
                    indices.add(colIdx);
                } else {
                    warningConsumer
                        .accept(String.format("Skipping column \"%s\" because its type is not compatible to %s.",
                            inclCol, clazz.getSimpleName()));
                }
            } else {
                throw new InvalidSettingsException(String.format("Column \"%s\" not found.", inclCol));
            }
        }
        return indices.stream()//
            .mapToInt(Integer::intValue)//
            .toArray();
    }

}
