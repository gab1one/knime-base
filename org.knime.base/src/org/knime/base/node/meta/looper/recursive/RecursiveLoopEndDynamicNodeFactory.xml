<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="./delegateloopend.png" type="LoopEnd" xmlns="http://knime.org/node/v4.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
    <name>Recursive Loop End</name>

    <shortDescription>
        The loop end node for a recursive loop. This type of loop passes data from the Recursive Loop End
        node to the Recursive Loop Start node.
    </shortDescription>

    <fullDescription>
        <intro>
            <p>
                The Recursive Loop node pair enables the passing of data tables from the <i>Recursive Loop End</i> back to the <i>Recursive Loop Start.</i>
            </p>
            <p>
                The <i>Recursive Loop Start</i> requires initialized tables. These tables are output by the <i>Recursive Loop Start</i> in the first iteration of the loop.
            </p>
            <p>
                The tables received by the corresponding <i>Recursive Loop End</i> are passed back to the <i>Recursive Loop Start</i> node.
                Starting with the second iteration, the <i>Recursive Loop Start</i> node outputs the data as received by the Recursive Loop End.
            </p>
            <p>
                You can add more recursion input tables and collector input and output tables using the &#8220;&#8230;&#8221; menu.
                The number of recursion ports must be the same as the number of recursion ports of the corresponding <i>Recursive
                Loop Start</i> node. Recursion and collector ports are independent of each other. The collection ports are always
                listed first.
            </p>

            <p>
                The loop runs until one of the three stopping criteria is met:
                <ul>
                    <li>
                        <i>Maximum number of iterations:</i> to ensure no endless loop is
                        created, the loop will end after the set number of iterations.
                    </li>
                    <li>
                        <i>Minimal number of rows:</i> to ensure enough rows are present for processing,
                        the loop stops if <b>one</b> of it's recursion input tables contains less rows than the set minimum.
                        This minimum can be set for each recursion input table individually.
                    </li>
                    <li>
                        <i>End loop with variable:</i> the loop ends if the option is enabled and the value of the selected
                        variable equals &#8220;true&#8221;.
                    </li>
                </ul>
            </p>
            <p>
                The data passed to the collector ports is collected and passed to the <i>n</i> respective output ports.
                The data at the recursion ports (all ports after input port <i>n)</i> is returned to the <i>Recursive Loop Start</i> node.
            </p>
        </intro>
        <option name="Maximal number of iterations">
            The maximum number of iterations the loop will run.
        </option>
        <option name="Minimal number of rows">
            The minimal number of rows for each recursion input table required to continue iterating.
            If <b>one</b> of the tables falls under it's set threshold, the recursion will stop.
        </option>
        <option name="End loop with variable">
                Whether the node execution is controlled by a variable. When enabled, this allows choosing the Flow Variable
                that ends the loop if it's value equals &#8220;true&#8221;.
        </option>
        <option name="Collect data from last iteration only">
            If this option is checked, only the last input to the corresponding collecting data port is passed through to the outport.
            Hence, the data of earlier iterations is discarded. This option can be set for each collector port individually.
        </option>
        <option name="Add iteration column">
            Allows you to add a column containing the iteration number to the corresponding collector output table.
            This option can be set for each collector port individually.
        </option>
		<option name="Propagate modified loop variables">
			If checked, variables whose values are modified within the loop are exported by this node. These variables
			must be declared outside the loop, i.e. injected into the loop from a side-branch or be available upstream
			of the corresponding loop start node. For the latter, any modification of a variable is passed back to the
			start node in subsequent iterations (e.g. moving sum calculation). Note that variables defined by the loop
			start node itself are excluded as these usually represent loop controls (e.g. <i>"currentIteration"</i>).
		</option>
        <link href="https://docs.knime.com/latest/analytics_platform_flow_control_guide/index.html#loops">
            KNIME Flow Control Guide: Section Loops
        </link>
    </fullDescription>

    <ports>
        <inPort index="0" name="Collecting data">
                Data to be collected for the output.
        </inPort>
        <inPort index="1" name="Recursion data">
                Data to be passed back to loop start.
        </inPort>
        <dynInPort name="Collecting data" group-identifier="Collector" insert-before="0">
                Data to be collected for the output.
        </dynInPort>
        <dynInPort name="Recursion data" group-identifier="Recursion" insert-before="1">
                Data to be passed back to loop start.
        </dynInPort>
        <outPort index="0" name="Collected data">
                The rows collected from the corresponding collector port.
        </outPort>
        <dynOutPort name="Collected data" group-identifier="Collector" insert-before="0">
                The rows collected from the corresponding collector port.
        </dynOutPort>
    </ports>
</knimeNode>
