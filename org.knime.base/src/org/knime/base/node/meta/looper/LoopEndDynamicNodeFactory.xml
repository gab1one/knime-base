<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="loop_end.png" type="LoopEnd" xmlns="http://knime.org/node/v4.1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
    <name>Loop End</name>

    <shortDescription>Node at the end of a loop</shortDescription>

    <fullDescription>
        <intro>
            <p>
                Node at the end of a loop. It is used to mark the end of a workflow loop and collects the
                intermediate results by row-wise concatenation of the incoming tables. The start of the loop
                is defined by the loop start node, in which you can define how often the loop should be executed
                (either fixed or derived from data, e.g. the "group loop start").
                All nodes in between are executed that many times.
            </p>
            <p>
                You can add more input and ouput tables using the &#8220;&#8230;&#8221; menu.
            </p>
        </intro>
        <option name="RowID policy">
        	Specifies how to deal with the RowIDs for each table.
        	<ul>
        	<li>Generate new RowIDs - RowIDs are newly generated (Row0, Row1, ...)</li>
        	<li>Unique RowIDs by appending a suffix - the iteration number is added to each RowID from the incoming table, thus making
            the RowIDs unique over all iterations </li>
            <li>Leave RowIDs unmodified - the incoming RowIDs are not altered. In this case you
            have to make sure that there are not duplicate RowIDs in different iterations. Otherwise an error occurs. </li>
        	</ul>
        </option>
        <option name="Add iteration column">Allows you to add a column containing the iteration number to the output tables.</option>
		<option name="Propagate modified loop variables">
			If checked, variables whose values are modified within the loop are exported by this node. These variables
			must be declared outside the loop, i.e. injected into the loop from a side-branch or be available upstream
			of the corresponding loop start node. For the latter, any modification of a variable is passed back to the
			start node in subsequent iterations (e.g. moving sum calculation). Note that variables defined by the loop
			start node itself are excluded as these usually represent loop controls (e.g. <i>"currentIteration"</i>).
		</option>
        <option name="Ignore empty input tables">
        	If this option is checked, empty input tables and their structures are ignored and will not cause the node to fail.
        </option>
        <option name="Allow variable column types">
        	If checked, the loop does not fail when the column types between different table iterations change.
            The resulting column will have the common super type of the different column types.
        </option>
		<option name="Allow changing table specifications">
			If checked, the table specifications between iterations can differ. If
			column have been added or removed between iterations, missing values
			are inserted accordingly in the result table.
			If not checked and the table specifications differ, the node will fail.
		</option>
        <link href="https://docs.knime.com/latest/analytics_platform_flow_control_guide/index.html#loops">
            KNIME Flow Control Guide: Section Loops
        </link>
    </fullDescription>

    <ports>
        <inPort index="0" name="Input table">
                Any data table
        </inPort>
        <dynInPort name="Input table" group-identifier="Collector" insert-before="0">
                Any data table
        </dynInPort>
        <outPort index="0" name="Collected results">
                Collected results from the loop body
        </outPort>
        <dynOutPort name="Collected results" group-identifier="Collector" insert-before="0">
                Collected results from the loop body
        </dynOutPort>
    </ports>
</knimeNode>
